#pragma version 10
intcblock 0 1 4 32
bytecblock 0x7061796d656e74416d6f756e74 0x7265636965766572 0x617361 0x7265717569726564416d6f756e74 0x6173736574546f6b656e 0x6f776e6572

// This TEAL was generated by TEALScript v0.105.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address,address)void
*abi_route_createApplication:
	// adminAddress: address
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 32
	==

	// argument 0 (adminAddress) for createApplication must be a address
	assert

	// worker: address
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 1 (worker) for createApplication must be a address
	assert

	// execute createApplication(address,address)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(worker: Address, adminAddress: Address): void
createApplication:
	proto 2 0

	// contracts/Market.algo.ts:25
	// this.requiredAmount.value = 10
	bytec 3 //  "requiredAmount"
	pushint 10
	app_global_put

	// contracts/Market.algo.ts:26
	// this.paymentAmount.value = 0
	bytec 0 //  "paymentAmount"
	intc 0 // 0
	app_global_put

	// contracts/Market.algo.ts:27
	// this.reciever.value = worker
	bytec 1 //  "reciever"
	frame_dig -1 // worker: Address
	app_global_put

	// contracts/Market.algo.ts:28
	// this.conditionMet.value = false
	pushbytes 0x636f6e646974696f6e4d6574 // "conditionMet"
	intc 0 // 0
	pushbytes 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put

	// contracts/Market.algo.ts:29
	// this.owner.value = adminAddress
	bytec 5 //  "owner"
	frame_dig -2 // adminAddress: Address
	app_global_put

	// contracts/Market.algo.ts:30
	// this.asa.value = AssetID.zeroIndex
	bytec 2 //  "asa"
	intc 0 // 0
	app_global_put

	// contracts/Market.algo.ts:31
	// this.assetToken.value = AssetID.zeroIndex
	bytec 4 //  "assetToken"
	intc 0 // 0
	app_global_put
	retsub

// optIntoAsset(uint64)void
*abi_route_optIntoAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optIntoAsset(uint64)void
	callsub optIntoAsset
	intc 1 // 1
	return

// optIntoAsset(asset: AssetID): void
optIntoAsset:
	proto 1 0

	// Verify a ASA hasn't already been opted into
	// contracts/Market.algo.ts:39
	// assert(this.asa.value === AssetID.zeroIndex)
	bytec 2 //  "asa"
	app_global_get
	intc 0 // 0
	==
	assert

	// Save ASA ID in global state
	// contracts/Market.algo.ts:42
	// this.asa.value = asset
	bytec 2 //  "asa"
	frame_dig -1 // asset: AssetID
	app_global_put

	// Submit opt-in transaction: 0 asset transfer to self
	// contracts/Market.algo.ts:45
	// sendAssetTransfer({
	//           assetReceiver: this.app.address,
	//           xferAsset: asset,
	//           assetAmount: 0,
	//         })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Market.algo.ts:46
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/Market.algo.ts:47
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/Market.algo.ts:48
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// optIntoToken(uint64)void
*abi_route_optIntoToken:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optIntoToken(uint64)void
	callsub optIntoToken
	intc 1 // 1
	return

// optIntoToken(asset: AssetID): void
optIntoToken:
	proto 1 0

	// Only allow app creator to opt the app account into a ASA
	// contracts/Market.algo.ts:56
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"globals.creatorAddress"}
	assert

	// Verify a ASA hasn't already been opted into
	// contracts/Market.algo.ts:59
	// assert(this.asa.value === AssetID.zeroIndex)
	bytec 2 //  "asa"
	app_global_get
	intc 0 // 0
	==
	assert

	// Save ASA ID in global state
	// contracts/Market.algo.ts:62
	// this.assetToken.value = asset
	bytec 4 //  "assetToken"
	frame_dig -1 // asset: AssetID
	app_global_put

	// Submit opt-in transaction: 0 asset transfer to self
	// contracts/Market.algo.ts:65
	// sendAssetTransfer({
	//           assetReceiver: this.app.address,
	//           xferAsset: asset,
	//           assetAmount: 0,
	//         })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Market.algo.ts:66
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/Market.algo.ts:67
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/Market.algo.ts:68
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// takeFunds()void
*abi_route_takeFunds:
	// execute takeFunds()void
	callsub takeFunds
	intc 1 // 1
	return

// takeFunds(): void
takeFunds:
	proto 0 0

	// contracts/Market.algo.ts:74
	// assert(
	//           this.txn.sender === this.app.creator ||
	//             this.txn.sender === this.owner.value
	//         )
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	dup
	bnz *skip_or0
	txn Sender
	bytec 5 //  "owner"
	app_global_get
	==
	||

*skip_or0:
	assert

	// contracts/Market.algo.ts:78
	// assert(this.paymentAmount.value >= this.requiredAmount.value)
	bytec 0 //  "paymentAmount"
	app_global_get
	bytec 3 //  "requiredAmount"
	app_global_get
	>=
	assert

	// contracts/Market.algo.ts:80
	// sendPayment({
	//           receiver: this.owner.value,
	//           amount: this.paymentAmount.value,
	//         })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/Market.algo.ts:81
	// receiver: this.owner.value
	bytec 5 //  "owner"
	app_global_get
	itxn_field Receiver

	// contracts/Market.algo.ts:82
	// amount: this.paymentAmount.value
	bytec 0 //  "paymentAmount"
	app_global_get
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Market.algo.ts:84
	// this.paymentAmount.value = 0
	bytec 0 //  "paymentAmount"
	intc 0 // 0
	app_global_put
	retsub

// addFundsToEscrow(axfer)void
*abi_route_addFundsToEscrow:
	// ebaTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 2 //  axfer
	==

	// argument 0 (ebaTxn) for addFundsToEscrow must be a axfer transaction
	assert

	// execute addFundsToEscrow(axfer)void
	callsub addFundsToEscrow
	intc 1 // 1
	return

// addFundsToEscrow(ebaTxn: AssetTransferTxn): void
addFundsToEscrow:
	proto 1 0

	// contracts/Market.algo.ts:89
	// assert(this.txn.sender === this.reciever.value)
	txn Sender
	bytec 1 //  "reciever"
	app_global_get
	==
	assert

	// contracts/Market.algo.ts:91
	// verifyAssetTransferTxn(ebaTxn, {
	//             assetReceiver: this.app.address,
	//             xferAsset: this.assetToken.value
	//         })
	// verify assetReceiver
	frame_dig -1 // ebaTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"ebaTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // ebaTxn: AssetTransferTxn
	gtxns XferAsset
	bytec 4 //  "assetToken"
	app_global_get
	==

	// transaction verification failed: {"txn":"ebaTxn","field":"xferAsset","expected":"this.assetToken.value"}
	assert

	// contracts/Market.algo.ts:96
	// this.paymentAmount.value = ebaTxn.assetAmount
	bytec 0 //  "paymentAmount"
	frame_dig -1 // ebaTxn: AssetTransferTxn
	gtxns AssetAmount
	app_global_put
	retsub

// recieveNFT(uint64)void
*abi_route_recieveNFT:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute recieveNFT(uint64)void
	callsub recieveNFT
	intc 1 // 1
	return

// recieveNFT(asset: AssetID): void
recieveNFT:
	proto 1 0

	// contracts/Market.algo.ts:101
	// assert( this.txn.sender === this.reciever.value)
	txn Sender
	bytec 1 //  "reciever"
	app_global_get
	==
	assert

	// contracts/Market.algo.ts:102
	// assert(this.paymentAmount.value >= this.requiredAmount.value)
	bytec 0 //  "paymentAmount"
	app_global_get
	bytec 3 //  "requiredAmount"
	app_global_get
	>=
	assert

	// contracts/Market.algo.ts:104
	// sendAssetTransfer({
	//             assetReceiver: this.reciever.value,
	//             xferAsset: asset,
	//             assetAmount: 1,
	//           })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Market.algo.ts:105
	// assetReceiver: this.reciever.value
	bytec 1 //  "reciever"
	app_global_get
	itxn_field AssetReceiver

	// contracts/Market.algo.ts:106
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/Market.algo.ts:107
	// assetAmount: 1
	intc 1 // 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0xb4c77d71 // method "createApplication(address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x3987f0c1 // method "optIntoAsset(uint64)void"
	pushbytes 0xa290d27d // method "optIntoToken(uint64)void"
	pushbytes 0xf9aac434 // method "takeFunds()void"
	pushbytes 0x8f7173e1 // method "addFundsToEscrow(axfer)void"
	pushbytes 0xadeb3d1a // method "recieveNFT(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_optIntoAsset *abi_route_optIntoToken *abi_route_takeFunds *abi_route_addFundsToEscrow *abi_route_recieveNFT

	// this contract does not implement the given ABI method for call NoOp
	err