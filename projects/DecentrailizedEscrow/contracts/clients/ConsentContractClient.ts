/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "createBox()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createConsent(string,string,string,uint64,string,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "revokeConsent()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "extendConsent(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateStatus()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "consentTitle": {
          "type": "bytes",
          "key": "consentTitle"
        },
        "description": {
          "type": "bytes",
          "key": "description"
        },
        "organization": {
          "type": "bytes",
          "key": "organization"
        },
        "expirationDate": {
          "type": "uint64",
          "key": "expirationDate"
        },
        "consentHash": {
          "type": "bytes",
          "key": "consentHash"
        },
        "status": {
          "type": "bytes",
          "key": "status"
        },
        "owner": {
          "type": "bytes",
          "key": "owner"
        },
        "signedUrl": {
          "type": "bytes",
          "key": "signedUrl"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 7,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxCmJ5dGVjYmxvY2sgMHg3Mzc0NjE3NDc1NzMgMHg2NTc4NzA2OTcyNjE3NDY5NmY2ZTQ0NjE3NDY1IDB4MDAwMCAweDZmNzc2ZTY1NzIgMHg2MzZmNmU3MzY1NmU3NDQ0NjE3NDYxIDB4NDE2Mzc0Njk3NjY1IDB4NjM2ZjZlNzM2NTZlNzQ1NDY5NzQ2YzY1IDB4NmY3MjY3NjE2ZTY5N2E2MTc0Njk2ZjZlIDB4NjQ2NTczNjM3MjY5NzA3NDY5NmY2ZSAweDYzNmY2ZTczNjU2ZTc0NDg2MTczNjggMHg3MzY5Njc2ZTY1NjQ1NTcyNmMgMHgwMDA2NDE2Mzc0Njk3NjY1CgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNS40Ci8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyl2b2lkCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBvd25lckFkZHJlc3M6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglwdXNoaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKG93bmVyQWRkcmVzcykgZm9yIGNyZWF0ZUFwcGxpY2F0aW9uIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24ob3duZXJBZGRyZXNzOiBBZGRyZXNzKTogdm9pZApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czoyMAoJLy8gdGhpcy5jb25zZW50VGl0bGUudmFsdWUgPSAiIgoJYnl0ZWMgNiAvLyAgImNvbnNlbnRUaXRsZSIKCWJ5dGVjIDIgLy8gMHgwMDAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czoyMQoJLy8gdGhpcy5kZXNjcmlwdGlvbi52YWx1ZSA9ICIiCglieXRlYyA4IC8vICAiZGVzY3JpcHRpb24iCglieXRlYyAyIC8vIDB4MDAwMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29uc2VudENvbnRyYWN0LmFsZ28udHM6MjIKCS8vIHRoaXMub3JnYW5pemF0aW9uLnZhbHVlID0gIiIKCWJ5dGVjIDcgLy8gICJvcmdhbml6YXRpb24iCglieXRlYyAyIC8vIDB4MDAwMAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29uc2VudENvbnRyYWN0LmFsZ28udHM6MjMKCS8vIHRoaXMuZXhwaXJhdGlvbkRhdGUudmFsdWUgPSAwCglieXRlYyAxIC8vICAiZXhwaXJhdGlvbkRhdGUiCglwdXNoaW50IDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbnNlbnRDb250cmFjdC5hbGdvLnRzOjI0CgkvLyB0aGlzLmNvbnNlbnRIYXNoLnZhbHVlID0gIiIKCWJ5dGVjIDkgLy8gICJjb25zZW50SGFzaCIKCWJ5dGVjIDIgLy8gMHgwMDAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czoyNQoJLy8gdGhpcy5zdGF0dXMudmFsdWUgPSAiQWN0aXZlIgoJYnl0ZWMgMCAvLyAgInN0YXR1cyIKCWJ5dGVjIDExIC8vIDB4MDAwNjQxNjM3NDY5NzY2NQoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29uc2VudENvbnRyYWN0LmFsZ28udHM6MjYKCS8vIHRoaXMub3duZXIudmFsdWUgPSBvd25lckFkZHJlc3MKCWJ5dGVjIDMgLy8gICJvd25lciIKCWZyYW1lX2RpZyAtMSAvLyBvd25lckFkZHJlc3M6IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbnNlbnRDb250cmFjdC5hbGdvLnRzOjI3CgkvLyB0aGlzLnNpZ25lZFVybC52YWx1ZSA9ICIiCglieXRlYyAxMCAvLyAgInNpZ25lZFVybCIKCWJ5dGVjIDIgLy8gMHgwMDAwCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBjcmVhdGVCb3goKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVCb3g6CgkvLyBleGVjdXRlIGNyZWF0ZUJveCgpdm9pZAoJY2FsbHN1YiBjcmVhdGVCb3gKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUJveCgpOiB2b2lkCmNyZWF0ZUJveDoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czozMQoJLy8gdGhpcy5jb25zZW50RGF0YUJveC5jcmVhdGUoNDAwKQoJYnl0ZWMgNCAvLyAgImNvbnNlbnREYXRhIgoJcHVzaGludCA0MDAKCWJveF9jcmVhdGUKCXBvcAoJcmV0c3ViCgovLyBjcmVhdGVDb25zZW50KHN0cmluZyxzdHJpbmcsc3RyaW5nLHVpbnQ2NCxzdHJpbmcsc3RyaW5nLHN0cmluZyl2b2lkCiphYmlfcm91dGVfY3JlYXRlQ29uc2VudDoKCS8vIGNvbnNldERhdGE6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNwoJZXh0cmFjdCAyIDAKCgkvLyBzaWduZWRVcmw6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgoJZXh0cmFjdCAyIDAKCgkvLyBjb25zZW50SGFzaDogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglleHRyYWN0IDIgMAoKCS8vIGR1cmF0aW9uOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyBvcmdhbml6YXRpb246IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZXh0cmFjdCAyIDAKCgkvLyBkZXNjcmlwdGlvbjogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIHRpdGxlOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBjcmVhdGVDb25zZW50KHN0cmluZyxzdHJpbmcsc3RyaW5nLHVpbnQ2NCxzdHJpbmcsc3RyaW5nLHN0cmluZyl2b2lkCgljYWxsc3ViIGNyZWF0ZUNvbnNlbnQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUNvbnNlbnQodGl0bGU6IHN0cmluZywgZGVzY3JpcHRpb246IHN0cmluZywgb3JnYW5pemF0aW9uOiBzdHJpbmcsIGR1cmF0aW9uOiB1aW50NjQsIGNvbnNlbnRIYXNoOiBzdHJpbmcsIHNpZ25lZFVybDogc3RyaW5nLCBjb25zZXREYXRhOiBzdHJpbmcpOiB2b2lkCmNyZWF0ZUNvbnNlbnQ6Cglwcm90byA3IDAKCgkvLyBjb250cmFjdHMvQ29uc2VudENvbnRyYWN0LmFsZ28udHM6NDUKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMub3duZXIudmFsdWUpCgl0eG4gU2VuZGVyCglieXRlYyAzIC8vICAib3duZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czo0NgoJLy8gdGhpcy5jb25zZW50VGl0bGUudmFsdWUgPSB0aXRsZQoJYnl0ZWMgNiAvLyAgImNvbnNlbnRUaXRsZSIKCWZyYW1lX2RpZyAtMSAvLyB0aXRsZTogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29uc2VudENvbnRyYWN0LmFsZ28udHM6NDcKCS8vIHRoaXMuZGVzY3JpcHRpb24udmFsdWUgPSBkZXNjcmlwdGlvbgoJYnl0ZWMgOCAvLyAgImRlc2NyaXB0aW9uIgoJZnJhbWVfZGlnIC0yIC8vIGRlc2NyaXB0aW9uOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czo0OAoJLy8gdGhpcy5vcmdhbml6YXRpb24udmFsdWUgPSBvcmdhbml6YXRpb24KCWJ5dGVjIDcgLy8gICJvcmdhbml6YXRpb24iCglmcmFtZV9kaWcgLTMgLy8gb3JnYW5pemF0aW9uOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czo1MAoJLy8gdGhpcy5leHBpcmF0aW9uRGF0ZS52YWx1ZSA9IGdsb2JhbHMubGF0ZXN0VGltZXN0YW1wICsgZHVyYXRpb24KCWJ5dGVjIDEgLy8gICJleHBpcmF0aW9uRGF0ZSIKCWdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKCWZyYW1lX2RpZyAtNCAvLyBkdXJhdGlvbjogdWludDY0CgkrCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czo1MQoJLy8gdGhpcy5jb25zZW50SGFzaC52YWx1ZSA9IGNvbnNlbnRIYXNoCglieXRlYyA5IC8vICAiY29uc2VudEhhc2giCglmcmFtZV9kaWcgLTUgLy8gY29uc2VudEhhc2g6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0NvbnNlbnRDb250cmFjdC5hbGdvLnRzOjUyCgkvLyB0aGlzLnN0YXR1cy52YWx1ZSA9ICJBY3RpdmUiCglieXRlYyAwIC8vICAic3RhdHVzIgoJYnl0ZWMgMTEgLy8gMHgwMDA2NDE2Mzc0Njk3NjY1CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czo1NAoJLy8gdGhpcy5zaWduZWRVcmwudmFsdWUgPSBzaWduZWRVcmwKCWJ5dGVjIDEwIC8vICAic2lnbmVkVXJsIgoJZnJhbWVfZGlnIC02IC8vIHNpZ25lZFVybDogc3RyaW5nCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHMvQ29uc2VudENvbnRyYWN0LmFsZ28udHM6NTcKCS8vIHRoaXMuY29uc2VudERhdGFCb3gudmFsdWUgPSBjb25zZXREYXRhCglieXRlYyA0IC8vICAiY29uc2VudERhdGEiCglkdXAKCWJveF9kZWwKCXBvcAoJZnJhbWVfZGlnIC03IC8vIGNvbnNldERhdGE6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWJveF9wdXQKCXJldHN1YgoKLy8gcmV2b2tlQ29uc2VudCgpdm9pZAoqYWJpX3JvdXRlX3Jldm9rZUNvbnNlbnQ6CgkvLyBleGVjdXRlIHJldm9rZUNvbnNlbnQoKXZvaWQKCWNhbGxzdWIgcmV2b2tlQ29uc2VudAoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gcmV2b2tlQ29uc2VudCgpOiB2b2lkCnJldm9rZUNvbnNlbnQ6Cglwcm90byAwIDAKCgkvLyBjb250cmFjdHMvQ29uc2VudENvbnRyYWN0LmFsZ28udHM6NjMKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMub3duZXIudmFsdWUpCgl0eG4gU2VuZGVyCglieXRlYyAzIC8vICAib3duZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czo2NQoJLy8gYXNzZXJ0KHRoaXMuc3RhdHVzLnZhbHVlID09PSAiQWN0aXZlIikKCWJ5dGVjIDAgLy8gICJzdGF0dXMiCglhcHBfZ2xvYmFsX2dldAoJZXh0cmFjdCAyIDAKCWJ5dGVjIDUgLy8gICJBY3RpdmUiCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0NvbnNlbnRDb250cmFjdC5hbGdvLnRzOjY2CgkvLyB0aGlzLnN0YXR1cy52YWx1ZSA9ICJSZXZva2VkIgoJYnl0ZWMgMCAvLyAgInN0YXR1cyIKCXB1c2hieXRlcyAweDAwMDc1MjY1NzY2ZjZiNjU2NAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gZXh0ZW5kQ29uc2VudCh1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2V4dGVuZENvbnNlbnQ6CgkvLyBkdXJhdGlvbjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBleHRlbmRDb25zZW50KHVpbnQ2NCl2b2lkCgljYWxsc3ViIGV4dGVuZENvbnNlbnQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGV4dGVuZENvbnNlbnQoZHVyYXRpb246IHVpbnQ2NCk6IHZvaWQKZXh0ZW5kQ29uc2VudDoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czo3MgoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5vd25lci52YWx1ZSkKCXR4biBTZW5kZXIKCWJ5dGVjIDMgLy8gICJvd25lciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0NvbnNlbnRDb250cmFjdC5hbGdvLnRzOjc0CgkvLyBhc3NlcnQodGhpcy5zdGF0dXMudmFsdWUgPT09ICJBY3RpdmUiKQoJYnl0ZWMgMCAvLyAgInN0YXR1cyIKCWFwcF9nbG9iYWxfZ2V0CglleHRyYWN0IDIgMAoJYnl0ZWMgNSAvLyAgIkFjdGl2ZSIKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvQ29uc2VudENvbnRyYWN0LmFsZ28udHM6NzYKCS8vIHRoaXMuZXhwaXJhdGlvbkRhdGUudmFsdWUgKz0gZHVyYXRpb24KCWJ5dGVjIDEgLy8gICJleHBpcmF0aW9uRGF0ZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gZHVyYXRpb246IHVpbnQ2NAoJKwoJYnl0ZWMgMSAvLyAgImV4cGlyYXRpb25EYXRlIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gdXBkYXRlU3RhdHVzKCl2b2lkCiphYmlfcm91dGVfdXBkYXRlU3RhdHVzOgoJLy8gZXhlY3V0ZSB1cGRhdGVTdGF0dXMoKXZvaWQKCWNhbGxzdWIgdXBkYXRlU3RhdHVzCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyB1cGRhdGVTdGF0dXMoKTogdm9pZAp1cGRhdGVTdGF0dXM6Cglwcm90byAwIDAKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gY29udHJhY3RzL0NvbnNlbnRDb250cmFjdC5hbGdvLnRzOjgyCgkvLyBnbG9iYWxzLmxhdGVzdFRpbWVzdGFtcCA+IHRoaXMuZXhwaXJhdGlvbkRhdGUudmFsdWUgJiYgdGhpcy5zdGF0dXMudmFsdWUgPT09ICJBY3RpdmUiCglnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCglieXRlYyAxIC8vICAiZXhwaXJhdGlvbkRhdGUiCglhcHBfZ2xvYmFsX2dldAoJPgoJZHVwCglieiAqc2tpcF9hbmQwCglieXRlYyAwIC8vICAic3RhdHVzIgoJYXBwX2dsb2JhbF9nZXQKCWV4dHJhY3QgMiAwCglieXRlYyA1IC8vICAiQWN0aXZlIgoJPT0KCSYmCgoqc2tpcF9hbmQwOgoJYnogKmlmMF9lbmQKCgkvLyAqaWYwX2NvbnNlcXVlbnQKCS8vIGNvbnRyYWN0cy9Db25zZW50Q29udHJhY3QuYWxnby50czo4MwoJLy8gdGhpcy5zdGF0dXMudmFsdWUgPSAiRXhwaXJlZCIKCWJ5dGVjIDAgLy8gICJzdGF0dXMiCglwdXNoYnl0ZXMgMHgwMDA3NDU3ODcwNjk3MjY1NjQKCWFwcF9nbG9iYWxfcHV0CgoqaWYwX2VuZDoKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJcHVzaGJ5dGVzIDB4ZDMyNGJlYTQgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHhlYTA0NTAzNiAvLyBtZXRob2QgImNyZWF0ZUJveCgpdm9pZCIKCXB1c2hieXRlcyAweDFmNWM3ZDRiIC8vIG1ldGhvZCAiY3JlYXRlQ29uc2VudChzdHJpbmcsc3RyaW5nLHN0cmluZyx1aW50NjQsc3RyaW5nLHN0cmluZyxzdHJpbmcpdm9pZCIKCXB1c2hieXRlcyAweDZiMjk2ZjM1IC8vIG1ldGhvZCAicmV2b2tlQ29uc2VudCgpdm9pZCIKCXB1c2hieXRlcyAweDVlYTQ2OWU2IC8vIG1ldGhvZCAiZXh0ZW5kQ29uc2VudCh1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweDFmMWJkMjFjIC8vIG1ldGhvZCAidXBkYXRlU3RhdHVzKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVCb3ggKmFiaV9yb3V0ZV9jcmVhdGVDb25zZW50ICphYmlfcm91dGVfcmV2b2tlQ29uc2VudCAqYWJpX3JvdXRlX2V4dGVuZENvbnNlbnQgKmFiaV9yb3V0ZV91cGRhdGVTdGF0dXMKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ConsentContract",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "ownerAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createBox",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createConsent",
        "args": [
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "organization",
            "type": "string"
          },
          {
            "name": "duration",
            "type": "uint64"
          },
          {
            "name": "consentHash",
            "type": "string"
          },
          {
            "name": "signedUrl",
            "type": "string"
          },
          {
            "name": "consetData",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "revokeConsent",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "extendConsent",
        "args": [
          {
            "name": "duration",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateStatus",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the ConsentContract smart contract.
 */
export type ConsentContract = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address)void' | 'createApplication', {
      argsObj: {
        ownerAddress: string
      }
      argsTuple: [ownerAddress: string]
      returns: void
    }>
    & Record<'createBox()void' | 'createBox', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'createConsent(string,string,string,uint64,string,string,string)void' | 'createConsent', {
      argsObj: {
        title: string
        description: string
        organization: string
        duration: bigint | number
        consentHash: string
        signedUrl: string
        consetData: string
      }
      argsTuple: [title: string, description: string, organization: string, duration: bigint | number, consentHash: string, signedUrl: string, consetData: string]
      returns: void
    }>
    & Record<'revokeConsent()void' | 'revokeConsent', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'extendConsent(uint64)void' | 'extendConsent', {
      argsObj: {
        duration: bigint | number
      }
      argsTuple: [duration: bigint | number]
      returns: void
    }>
    & Record<'updateStatus()void' | 'updateStatus', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'consentTitle'?: BinaryState
      'description'?: BinaryState
      'organization'?: BinaryState
      'expirationDate'?: IntegerState
      'consentHash'?: BinaryState
      'status'?: BinaryState
      'owner'?: BinaryState
      'signedUrl'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type ConsentContractSig = keyof ConsentContract['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends ConsentContractSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the ConsentContract smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends ConsentContractSig> = ConsentContract['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the ConsentContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends ConsentContractSig> = ConsentContract['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type ConsentContractCreateCalls = (typeof ConsentContractCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type ConsentContractCreateCallParams =
  | (TypedCallParams<'createApplication(address)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type ConsentContractDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: ConsentContractCreateCalls) => ConsentContractCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class ConsentContractCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the ConsentContract smart contract using the createApplication(address)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.ownerAddress],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createBox()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createBox(args: MethodArgs<'createBox()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createBox()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createConsent(string,string,string,uint64,string,string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createConsent(args: MethodArgs<'createConsent(string,string,string,uint64,string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createConsent(string,string,string,uint64,string,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.title, args.description, args.organization, args.duration, args.consentHash, args.signedUrl, args.consetData],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the revokeConsent()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static revokeConsent(args: MethodArgs<'revokeConsent()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'revokeConsent()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the extendConsent(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static extendConsent(args: MethodArgs<'extendConsent(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'extendConsent(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.duration],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateStatus()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateStatus(args: MethodArgs<'updateStatus()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateStatus()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the ConsentContract smart contract
 */
export class ConsentContractClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `ConsentContractClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof ConsentContract['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the ConsentContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: ConsentContractDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(ConsentContractCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the ConsentContract smart contract using the createApplication(address)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(address)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(ConsentContractCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the ConsentContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the createBox()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createBox(args: MethodArgs<'createBox()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ConsentContractCallFactory.createBox(args, params))
  }

  /**
   * Calls the createConsent(string,string,string,uint64,string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createConsent(args: MethodArgs<'createConsent(string,string,string,uint64,string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ConsentContractCallFactory.createConsent(args, params))
  }

  /**
   * Calls the revokeConsent()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public revokeConsent(args: MethodArgs<'revokeConsent()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ConsentContractCallFactory.revokeConsent(args, params))
  }

  /**
   * Calls the extendConsent(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public extendConsent(args: MethodArgs<'extendConsent(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ConsentContractCallFactory.extendConsent(args, params))
  }

  /**
   * Calls the updateStatus()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateStatus(args: MethodArgs<'updateStatus()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(ConsentContractCallFactory.updateStatus(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<ConsentContract['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get consentTitle() {
        return ConsentContractClient.getBinaryState(state, 'consentTitle')
      },
      get description() {
        return ConsentContractClient.getBinaryState(state, 'description')
      },
      get organization() {
        return ConsentContractClient.getBinaryState(state, 'organization')
      },
      get expirationDate() {
        return ConsentContractClient.getIntegerState(state, 'expirationDate')
      },
      get consentHash() {
        return ConsentContractClient.getBinaryState(state, 'consentHash')
      },
      get status() {
        return ConsentContractClient.getBinaryState(state, 'status')
      },
      get owner() {
        return ConsentContractClient.getBinaryState(state, 'owner')
      },
      get signedUrl() {
        return ConsentContractClient.getBinaryState(state, 'signedUrl')
      },
    }
  }

  public compose(): ConsentContractComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createBox(args: MethodArgs<'createBox()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createBox(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createConsent(args: MethodArgs<'createConsent(string,string,string,uint64,string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createConsent(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      revokeConsent(args: MethodArgs<'revokeConsent()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.revokeConsent(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      extendConsent(args: MethodArgs<'extendConsent(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.extendConsent(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateStatus(args: MethodArgs<'updateStatus()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateStatus(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as ConsentContractComposer
  }
}
export type ConsentContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createBox()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createBox(args: MethodArgs<'createBox()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ConsentContractComposer<[...TReturns, MethodReturn<'createBox()void'>]>

  /**
   * Calls the createConsent(string,string,string,uint64,string,string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createConsent(args: MethodArgs<'createConsent(string,string,string,uint64,string,string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ConsentContractComposer<[...TReturns, MethodReturn<'createConsent(string,string,string,uint64,string,string,string)void'>]>

  /**
   * Calls the revokeConsent()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  revokeConsent(args: MethodArgs<'revokeConsent()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ConsentContractComposer<[...TReturns, MethodReturn<'revokeConsent()void'>]>

  /**
   * Calls the extendConsent(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  extendConsent(args: MethodArgs<'extendConsent(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ConsentContractComposer<[...TReturns, MethodReturn<'extendConsent(uint64)void'>]>

  /**
   * Calls the updateStatus()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateStatus(args: MethodArgs<'updateStatus()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): ConsentContractComposer<[...TReturns, MethodReturn<'updateStatus()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the ConsentContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): ConsentContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): ConsentContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<ConsentContractComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<ConsentContractComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type ConsentContractComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type ConsentContractComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
