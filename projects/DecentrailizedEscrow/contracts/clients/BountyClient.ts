/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(string,string,string,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "depositReward(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setWinner(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendReward()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "bountyTitle": {
          "type": "bytes",
          "key": "bountyTitle"
        },
        "bountyCid": {
          "type": "bytes",
          "key": "bountyCid"
        },
        "bountyOrganization": {
          "type": "bytes",
          "key": "bountyOrganization"
        },
        "reward": {
          "type": "uint64",
          "key": "reward"
        },
        "winner": {
          "type": "bytes",
          "key": "winner"
        },
        "expiryDate": {
          "type": "uint64",
          "key": "expiryDate"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 4,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxCmJ5dGVjYmxvY2sgMHg3MjY1Nzc2MTcyNjQgMHg3NzY5NmU2ZTY1NzIKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA1LjQKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcsc3RyaW5nLHN0cmluZyx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gZXhwaXJ5RGF0ZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gYm91bnR5T3JnYW5pemF0aW9uOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWV4dHJhY3QgMiAwCgoJLy8gY2ZpZDogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoKCS8vIHRpdGxlOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcsc3RyaW5nLHN0cmluZyx1aW50NjQpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24odGl0bGU6IHN0cmluZywgY2ZpZDogc3RyaW5nLCBib3VudHlPcmdhbml6YXRpb246IHN0cmluZywgZXhwaXJ5RGF0ZSA6IHVpbnQ2NCk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byA0IDAKCgkvLyBjb250cmFjdHMvRGV2LmFsZ28udHM6MTgKCS8vIHRoaXMuYm91bnR5VGl0bGUudmFsdWUgPSB0aXRsZQoJcHVzaGJ5dGVzIDB4NjI2Zjc1NmU3NDc5NTQ2OTc0NmM2NSAvLyAiYm91bnR5VGl0bGUiCglmcmFtZV9kaWcgLTEgLy8gdGl0bGU6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0Rldi5hbGdvLnRzOjE5CgkvLyB0aGlzLmJvdW50eUNpZC52YWx1ZSA9IGNmaWQKCXB1c2hieXRlcyAweDYyNmY3NTZlNzQ3OTQzNjk2NCAvLyAiYm91bnR5Q2lkIgoJZnJhbWVfZGlnIC0yIC8vIGNmaWQ6IHN0cmluZwoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzL0Rldi5hbGdvLnRzOjIwCgkvLyB0aGlzLmJvdW50eU9yZ2FuaXphdGlvbi52YWx1ZSA9IGJvdW50eU9yZ2FuaXphdGlvbgoJcHVzaGJ5dGVzIDB4NjI2Zjc1NmU3NDc5NGY3MjY3NjE2ZTY5N2E2MTc0Njk2ZjZlIC8vICJib3VudHlPcmdhbml6YXRpb24iCglmcmFtZV9kaWcgLTMgLy8gYm91bnR5T3JnYW5pemF0aW9uOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0cy9EZXYuYWxnby50czoyMQoJLy8gdGhpcy5leHBpcnlEYXRlLnZhbHVlID0gZXhwaXJ5RGF0ZQoJcHVzaGJ5dGVzIDB4NjU3ODcwNjk3Mjc5NDQ2MTc0NjUgLy8gImV4cGlyeURhdGUiCglmcmFtZV9kaWcgLTQgLy8gZXhwaXJ5RGF0ZTogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBkZXBvc2l0UmV3YXJkKHBheSl2b2lkCiphYmlfcm91dGVfZGVwb3NpdFJld2FyZDoKCS8vIHJld2FyZFR4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludGMgMCAvLyAgcGF5Cgk9PQoKCS8vIGFyZ3VtZW50IDAgKHJld2FyZFR4bikgZm9yIGRlcG9zaXRSZXdhcmQgbXVzdCBiZSBhIHBheSB0cmFuc2FjdGlvbgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBkZXBvc2l0UmV3YXJkKHBheSl2b2lkCgljYWxsc3ViIGRlcG9zaXRSZXdhcmQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGRlcG9zaXRSZXdhcmQocmV3YXJkVHhuOiBQYXlUeG4pOiB2b2lkCmRlcG9zaXRSZXdhcmQ6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvRGV2LmFsZ28udHM6MjcKCS8vIGFzc2VydCgKCS8vICAgICB0aGlzLnR4bi5zZW5kZXIgPT0gdGhpcy5hcHAuY3JlYXRvcgoJLy8gKQoJdHhuIFNlbmRlcgoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYXBwX3BhcmFtc19nZXQgQXBwQ3JlYXRvcgoJcG9wCgk9PQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0Rldi5hbGdvLnRzOjMxCgkvLyB2ZXJpZnlQYXlUeG4ocmV3YXJkVHhuLAoJLy8gICAgIHsKCS8vICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCS8vICAgICB9KQoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gcmV3YXJkVHhuOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InJld2FyZFR4biIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gY29udHJhY3RzL0Rldi5hbGdvLnRzOjM2CgkvLyB0aGlzLnJld2FyZC52YWx1ZSA9IHJld2FyZFR4bi5hbW91bnQKCWJ5dGVjIDAgLy8gICJyZXdhcmQiCglmcmFtZV9kaWcgLTEgLy8gcmV3YXJkVHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gc2V0V2lubmVyKGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX3NldFdpbm5lcjoKCS8vIHdpbm5lcjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCXB1c2hpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAod2lubmVyKSBmb3Igc2V0V2lubmVyIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIHNldFdpbm5lcihhZGRyZXNzKXZvaWQKCWNhbGxzdWIgc2V0V2lubmVyCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzZXRXaW5uZXIod2lubmVyOiBBZGRyZXNzKTogdm9pZApzZXRXaW5uZXI6Cglwcm90byAxIDAKCgkvLyBjb250cmFjdHMvRGV2LmFsZ28udHM6NDUKCS8vIGFzc2VydCgKCS8vICAgICAgICAgdGhpcy50eG4uc2VuZGVyID09IHRoaXMuYXBwLmNyZWF0b3IKCS8vICAgICApCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfcGFyYW1zX2dldCBBcHBDcmVhdG9yCglwb3AKCT09Cglhc3NlcnQKCgkvLyBjb250cmFjdHMvRGV2LmFsZ28udHM6NDkKCS8vIHRoaXMud2lubmVyLnZhbHVlPSB3aW5uZXIKCWJ5dGVjIDEgLy8gICJ3aW5uZXIiCglmcmFtZV9kaWcgLTEgLy8gd2lubmVyOiBBZGRyZXNzCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBzZW5kUmV3YXJkKCl2b2lkCiphYmlfcm91dGVfc2VuZFJld2FyZDoKCS8vIGV4ZWN1dGUgc2VuZFJld2FyZCgpdm9pZAoJY2FsbHN1YiBzZW5kUmV3YXJkCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzZW5kUmV3YXJkKCk6IHZvaWQKc2VuZFJld2FyZDoKCXByb3RvIDAgMAoKCS8vIGNvbnRyYWN0cy9EZXYuYWxnby50czo1NgoJLy8gYXNzZXJ0KAoJLy8gICAgICAgICB0aGlzLnR4bi5zZW5kZXIgPT0gdGhpcy5hcHAuY3JlYXRvcgoJLy8gICAgICkKCXR4biBTZW5kZXIKCXR4bmEgQXBwbGljYXRpb25zIDAKCWFwcF9wYXJhbXNfZ2V0IEFwcENyZWF0b3IKCXBvcAoJPT0KCWFzc2VydAoKCS8vIGNvbnRyYWN0cy9EZXYuYWxnby50czo2MAoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICByZWNlaXZlcjogdGhpcy53aW5uZXIudmFsdWUsCgkvLyAgICAgICAgIGFtb3VudDogdGhpcy5yZXdhcmQudmFsdWUsCgkvLyAgICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAwIC8vICBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBjb250cmFjdHMvRGV2LmFsZ28udHM6NjEKCS8vIHJlY2VpdmVyOiB0aGlzLndpbm5lci52YWx1ZQoJYnl0ZWMgMSAvLyAgIndpbm5lciIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gY29udHJhY3RzL0Rldi5hbGdvLnRzOjYyCgkvLyBhbW91bnQ6IHRoaXMucmV3YXJkLnZhbHVlCglieXRlYyAwIC8vICAicmV3YXJkIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJcHVzaGludCAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJcHVzaGJ5dGVzIDB4YTU4MjQ5NTQgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcsc3RyaW5nLHN0cmluZyx1aW50NjQpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AKCWVycgoKKmNhbGxfTm9PcDoKCXB1c2hieXRlcyAweGJlNGYxZTRiIC8vIG1ldGhvZCAiZGVwb3NpdFJld2FyZChwYXkpdm9pZCIKCXB1c2hieXRlcyAweDE5OTFmM2M0IC8vIG1ldGhvZCAic2V0V2lubmVyKGFkZHJlc3Mpdm9pZCIKCXB1c2hieXRlcyAweDdmMTgxMWRiIC8vIG1ldGhvZCAic2VuZFJld2FyZCgpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfZGVwb3NpdFJld2FyZCAqYWJpX3JvdXRlX3NldFdpbm5lciAqYWJpX3JvdXRlX3NlbmRSZXdhcmQKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Bounty",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "title",
            "type": "string"
          },
          {
            "name": "cfid",
            "type": "string"
          },
          {
            "name": "bountyOrganization",
            "type": "string"
          },
          {
            "name": "expiryDate",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "depositReward",
        "args": [
          {
            "name": "rewardTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setWinner",
        "args": [
          {
            "name": "winner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendReward",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the Bounty smart contract.
 */
export type Bounty = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string,string,string,uint64)void' | 'createApplication', {
      argsObj: {
        title: string
        cfid: string
        bountyOrganization: string
        expiryDate: bigint | number
      }
      argsTuple: [title: string, cfid: string, bountyOrganization: string, expiryDate: bigint | number]
      returns: void
    }>
    & Record<'depositReward(pay)void' | 'depositReward', {
      argsObj: {
        rewardTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [rewardTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'setWinner(address)void' | 'setWinner', {
      argsObj: {
        winner: string
      }
      argsTuple: [winner: string]
      returns: void
    }>
    & Record<'sendReward()void' | 'sendReward', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'bountyTitle'?: BinaryState
      'bountyCid'?: BinaryState
      'bountyOrganization'?: BinaryState
      'reward'?: IntegerState
      'winner'?: BinaryState
      'expiryDate'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type BountySig = keyof Bounty['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends BountySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Bounty smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends BountySig> = Bounty['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Bounty smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BountySig> = Bounty['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type BountyCreateCalls = (typeof BountyCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type BountyCreateCallParams =
  | (TypedCallParams<'createApplication(string,string,string,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type BountyDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: BountyCreateCalls) => BountyCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class BountyCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Bounty smart contract using the createApplication(string,string,string,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(string,string,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(string,string,string,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.title, args.cfid, args.bountyOrganization, args.expiryDate],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the depositReward(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static depositReward(args: MethodArgs<'depositReward(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'depositReward(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.rewardTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setWinner(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setWinner(args: MethodArgs<'setWinner(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setWinner(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.winner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendReward()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendReward(args: MethodArgs<'sendReward()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendReward()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Bounty smart contract
 */
export class BountyClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `BountyClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Bounty['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Bounty smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: BountyDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(BountyCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Bounty smart contract using the createApplication(string,string,string,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(string,string,string,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(string,string,string,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(BountyCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Bounty smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the depositReward(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public depositReward(args: MethodArgs<'depositReward(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BountyCallFactory.depositReward(args, params))
  }

  /**
   * Calls the setWinner(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setWinner(args: MethodArgs<'setWinner(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BountyCallFactory.setWinner(args, params))
  }

  /**
   * Calls the sendReward()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendReward(args: MethodArgs<'sendReward()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BountyCallFactory.sendReward(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Bounty['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get bountyTitle() {
        return BountyClient.getBinaryState(state, 'bountyTitle')
      },
      get bountyCid() {
        return BountyClient.getBinaryState(state, 'bountyCid')
      },
      get bountyOrganization() {
        return BountyClient.getBinaryState(state, 'bountyOrganization')
      },
      get reward() {
        return BountyClient.getIntegerState(state, 'reward')
      },
      get winner() {
        return BountyClient.getBinaryState(state, 'winner')
      },
      get expiryDate() {
        return BountyClient.getIntegerState(state, 'expiryDate')
      },
    }
  }

  public compose(): BountyComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      depositReward(args: MethodArgs<'depositReward(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.depositReward(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setWinner(args: MethodArgs<'setWinner(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setWinner(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendReward(args: MethodArgs<'sendReward()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendReward(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as BountyComposer
  }
}
export type BountyComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the depositReward(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositReward(args: MethodArgs<'depositReward(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BountyComposer<[...TReturns, MethodReturn<'depositReward(pay)void'>]>

  /**
   * Calls the setWinner(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setWinner(args: MethodArgs<'setWinner(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BountyComposer<[...TReturns, MethodReturn<'setWinner(address)void'>]>

  /**
   * Calls the sendReward()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendReward(args: MethodArgs<'sendReward()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BountyComposer<[...TReturns, MethodReturn<'sendReward()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the Bounty smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): BountyComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): BountyComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<BountyComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<BountyComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type BountyComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type BountyComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
