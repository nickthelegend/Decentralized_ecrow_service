/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(address,uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "optIntoNFT(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyLicense(pay,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "payRoyalty(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cancelListing()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "pricePersonal": {
          "type": "uint64",
          "key": "pricePersonal"
        },
        "priceCommercial": {
          "type": "uint64",
          "key": "priceCommercial"
        },
        "priceExclusive": {
          "type": "uint64",
          "key": "priceExclusive"
        },
        "royaltyPercent": {
          "type": "uint64",
          "key": "royaltyPercent"
        },
        "creator": {
          "type": "bytes",
          "key": "creator"
        },
        "currentOwner": {
          "type": "bytes",
          "key": "currentOwner"
        },
        "nftAssetID": {
          "type": "uint64",
          "key": "nftAssetID"
        },
        "buyerLicense": {
          "type": "bytes",
          "key": "buyerLicense"
        },
        "expectedAmount": {
          "type": "uint64",
          "key": "expectedAmount"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 6
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "RoyaltyNFTMarketplace",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "creator",
            "type": "address"
          },
          {
            "name": "pricePersonal",
            "type": "uint64"
          },
          {
            "name": "priceCommercial",
            "type": "uint64"
          },
          {
            "name": "priceExclusive",
            "type": "uint64"
          },
          {
            "name": "royaltyPercent",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optIntoNFT",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "buyLicense",
        "args": [
          {
            "name": "payment",
            "type": "pay"
          },
          {
            "name": "licenseType",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transferOwnership",
        "args": [
          {
            "name": "newOwner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "payRoyalty",
        "args": [
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "amountPaid",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cancelListing",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the RoyaltyNftMarketplace smart contract.
 */
export type RoyaltyNftMarketplace = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,uint64,uint64,uint64,uint64)void' | 'createApplication', {
      argsObj: {
        creator: string
        pricePersonal: bigint | number
        priceCommercial: bigint | number
        priceExclusive: bigint | number
        royaltyPercent: bigint | number
      }
      argsTuple: [creator: string, pricePersonal: bigint | number, priceCommercial: bigint | number, priceExclusive: bigint | number, royaltyPercent: bigint | number]
      returns: void
    }>
    & Record<'optIntoNFT(uint64)void' | 'optIntoNFT', {
      argsObj: {
        asset: bigint | number
      }
      argsTuple: [asset: bigint | number]
      returns: void
    }>
    & Record<'buyLicense(pay,string)void' | 'buyLicense', {
      argsObj: {
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        licenseType: string
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>, licenseType: string]
      returns: void
    }>
    & Record<'transferOwnership(address)void' | 'transferOwnership', {
      argsObj: {
        newOwner: string
      }
      argsTuple: [newOwner: string]
      returns: void
    }>
    & Record<'payRoyalty(address,uint64)void' | 'payRoyalty', {
      argsObj: {
        to: string
        amountPaid: bigint | number
      }
      argsTuple: [to: string, amountPaid: bigint | number]
      returns: void
    }>
    & Record<'cancelListing()void' | 'cancelListing', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'pricePersonal'?: IntegerState
      'priceCommercial'?: IntegerState
      'priceExclusive'?: IntegerState
      'royaltyPercent'?: IntegerState
      'creator'?: BinaryState
      'currentOwner'?: BinaryState
      'nftAssetID'?: IntegerState
      'buyerLicense'?: BinaryState
      'expectedAmount'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type RoyaltyNftMarketplaceSig = keyof RoyaltyNftMarketplace['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends RoyaltyNftMarketplaceSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the RoyaltyNftMarketplace smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends RoyaltyNftMarketplaceSig> = RoyaltyNftMarketplace['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the RoyaltyNftMarketplace smart contract to the method's return type
 */
export type MethodReturn<TSignature extends RoyaltyNftMarketplaceSig> = RoyaltyNftMarketplace['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type RoyaltyNftMarketplaceCreateCalls = (typeof RoyaltyNftMarketplaceCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type RoyaltyNftMarketplaceCreateCallParams =
  | (TypedCallParams<'createApplication(address,uint64,uint64,uint64,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type RoyaltyNftMarketplaceDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: RoyaltyNftMarketplaceCreateCalls) => RoyaltyNftMarketplaceCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class RoyaltyNftMarketplaceCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the RoyaltyNFTMarketplace smart contract using the createApplication(address,uint64,uint64,uint64,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(address,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(address,uint64,uint64,uint64,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.creator, args.pricePersonal, args.priceCommercial, args.priceExclusive, args.royaltyPercent],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optIntoNFT(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optIntoNft(args: MethodArgs<'optIntoNFT(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optIntoNFT(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the buyLicense(pay,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static buyLicense(args: MethodArgs<'buyLicense(pay,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'buyLicense(pay,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment, args.licenseType],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transferOwnership(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transferOwnership(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.newOwner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the payRoyalty(address,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static payRoyalty(args: MethodArgs<'payRoyalty(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'payRoyalty(address,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.to, args.amountPaid],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cancelListing()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cancelListing(args: MethodArgs<'cancelListing()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cancelListing()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the RoyaltyNFTMarketplace smart contract
 */
export class RoyaltyNftMarketplaceClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `RoyaltyNftMarketplaceClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof RoyaltyNftMarketplace['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the RoyaltyNFTMarketplace smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: RoyaltyNftMarketplaceDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(RoyaltyNftMarketplaceCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the RoyaltyNFTMarketplace smart contract using the createApplication(address,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(address,uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(address,uint64,uint64,uint64,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(RoyaltyNftMarketplaceCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the RoyaltyNFTMarketplace smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the optIntoNFT(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optIntoNft(args: MethodArgs<'optIntoNFT(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RoyaltyNftMarketplaceCallFactory.optIntoNft(args, params))
  }

  /**
   * Calls the buyLicense(pay,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public buyLicense(args: MethodArgs<'buyLicense(pay,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RoyaltyNftMarketplaceCallFactory.buyLicense(args, params))
  }

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RoyaltyNftMarketplaceCallFactory.transferOwnership(args, params))
  }

  /**
   * Calls the payRoyalty(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public payRoyalty(args: MethodArgs<'payRoyalty(address,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RoyaltyNftMarketplaceCallFactory.payRoyalty(args, params))
  }

  /**
   * Calls the cancelListing()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cancelListing(args: MethodArgs<'cancelListing()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(RoyaltyNftMarketplaceCallFactory.cancelListing(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<RoyaltyNftMarketplace['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get pricePersonal() {
        return RoyaltyNftMarketplaceClient.getIntegerState(state, 'pricePersonal')
      },
      get priceCommercial() {
        return RoyaltyNftMarketplaceClient.getIntegerState(state, 'priceCommercial')
      },
      get priceExclusive() {
        return RoyaltyNftMarketplaceClient.getIntegerState(state, 'priceExclusive')
      },
      get royaltyPercent() {
        return RoyaltyNftMarketplaceClient.getIntegerState(state, 'royaltyPercent')
      },
      get creator() {
        return RoyaltyNftMarketplaceClient.getBinaryState(state, 'creator')
      },
      get currentOwner() {
        return RoyaltyNftMarketplaceClient.getBinaryState(state, 'currentOwner')
      },
      get nftAssetID() {
        return RoyaltyNftMarketplaceClient.getIntegerState(state, 'nftAssetID')
      },
      get buyerLicense() {
        return RoyaltyNftMarketplaceClient.getBinaryState(state, 'buyerLicense')
      },
      get expectedAmount() {
        return RoyaltyNftMarketplaceClient.getIntegerState(state, 'expectedAmount')
      },
    }
  }

  public compose(): RoyaltyNftMarketplaceComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      optIntoNft(args: MethodArgs<'optIntoNFT(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optIntoNft(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      buyLicense(args: MethodArgs<'buyLicense(pay,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.buyLicense(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferOwnership(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      payRoyalty(args: MethodArgs<'payRoyalty(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.payRoyalty(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cancelListing(args: MethodArgs<'cancelListing()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cancelListing(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as RoyaltyNftMarketplaceComposer
  }
}
export type RoyaltyNftMarketplaceComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optIntoNFT(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIntoNft(args: MethodArgs<'optIntoNFT(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RoyaltyNftMarketplaceComposer<[...TReturns, MethodReturn<'optIntoNFT(uint64)void'>]>

  /**
   * Calls the buyLicense(pay,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyLicense(args: MethodArgs<'buyLicense(pay,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RoyaltyNftMarketplaceComposer<[...TReturns, MethodReturn<'buyLicense(pay,string)void'>]>

  /**
   * Calls the transferOwnership(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferOwnership(args: MethodArgs<'transferOwnership(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RoyaltyNftMarketplaceComposer<[...TReturns, MethodReturn<'transferOwnership(address)void'>]>

  /**
   * Calls the payRoyalty(address,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  payRoyalty(args: MethodArgs<'payRoyalty(address,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RoyaltyNftMarketplaceComposer<[...TReturns, MethodReturn<'payRoyalty(address,uint64)void'>]>

  /**
   * Calls the cancelListing()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelListing(args: MethodArgs<'cancelListing()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): RoyaltyNftMarketplaceComposer<[...TReturns, MethodReturn<'cancelListing()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the RoyaltyNFTMarketplace smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): RoyaltyNftMarketplaceComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): RoyaltyNftMarketplaceComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<RoyaltyNftMarketplaceComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<RoyaltyNftMarketplaceComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type RoyaltyNftMarketplaceComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type RoyaltyNftMarketplaceComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
