/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(string,string,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "createNFTReward(string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optIntoAsset()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendRewardWinner1(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendRewardWinner2(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendRewardWinner3(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "questTitle": {
          "type": "bytes",
          "key": "questTitle"
        },
        "questLocation": {
          "type": "bytes",
          "key": "questLocation"
        },
        "winner1": {
          "type": "bytes",
          "key": "winner1"
        },
        "winner2": {
          "type": "bytes",
          "key": "winner2"
        },
        "winner3": {
          "type": "bytes",
          "key": "winner3"
        },
        "expiryDate": {
          "type": "uint64",
          "key": "expiryDate"
        },
        "reward1": {
          "type": "uint64",
          "key": "reward1"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 5,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "QuestContract",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "questTitle",
            "type": "string"
          },
          {
            "name": "questLocation",
            "type": "string"
          },
          {
            "name": "expiryDate",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createNFTReward",
        "args": [
          {
            "name": "assetUrl",
            "type": "string"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "optIntoAsset",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendRewardWinner1",
        "args": [
          {
            "name": "winner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendRewardWinner2",
        "args": [
          {
            "name": "winner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendRewardWinner3",
        "args": [
          {
            "name": "winner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the QuestContract smart contract.
 */
export type QuestContract = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string,string,uint64)void' | 'createApplication', {
      argsObj: {
        questTitle: string
        questLocation: string
        expiryDate: bigint | number
      }
      argsTuple: [questTitle: string, questLocation: string, expiryDate: bigint | number]
      returns: void
    }>
    & Record<'createNFTReward(string)uint64' | 'createNFTReward', {
      argsObj: {
        assetUrl: string
      }
      argsTuple: [assetUrl: string]
      returns: bigint
    }>
    & Record<'optIntoAsset()void' | 'optIntoAsset', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'sendRewardWinner1(address)void' | 'sendRewardWinner1', {
      argsObj: {
        winner: string
      }
      argsTuple: [winner: string]
      returns: void
    }>
    & Record<'sendRewardWinner2(address)void' | 'sendRewardWinner2', {
      argsObj: {
        winner: string
      }
      argsTuple: [winner: string]
      returns: void
    }>
    & Record<'sendRewardWinner3(address)void' | 'sendRewardWinner3', {
      argsObj: {
        winner: string
      }
      argsTuple: [winner: string]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'questTitle'?: BinaryState
      'questLocation'?: BinaryState
      'winner1'?: BinaryState
      'winner2'?: BinaryState
      'winner3'?: BinaryState
      'expiryDate'?: IntegerState
      'reward1'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type QuestContractSig = keyof QuestContract['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends QuestContractSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the QuestContract smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends QuestContractSig> = QuestContract['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the QuestContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends QuestContractSig> = QuestContract['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type QuestContractCreateCalls = (typeof QuestContractCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type QuestContractCreateCallParams =
  | (TypedCallParams<'createApplication(string,string,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type QuestContractDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: QuestContractCreateCalls) => QuestContractCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class QuestContractCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the QuestContract smart contract using the createApplication(string,string,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(string,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(string,string,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.questTitle, args.questLocation, args.expiryDate],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createNFTReward(string)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createNftReward(args: MethodArgs<'createNFTReward(string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createNFTReward(string)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.assetUrl],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the optIntoAsset()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optIntoAsset(args: MethodArgs<'optIntoAsset()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optIntoAsset()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendRewardWinner1(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendRewardWinner1(args: MethodArgs<'sendRewardWinner1(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendRewardWinner1(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.winner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendRewardWinner2(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendRewardWinner2(args: MethodArgs<'sendRewardWinner2(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendRewardWinner2(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.winner],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendRewardWinner3(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendRewardWinner3(args: MethodArgs<'sendRewardWinner3(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendRewardWinner3(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.winner],
      ...params,
    }
  }
}

/**
 * A client to make calls to the QuestContract smart contract
 */
export class QuestContractClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `QuestContractClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof QuestContract['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the QuestContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: QuestContractDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(QuestContractCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the QuestContract smart contract using the createApplication(string,string,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(string,string,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(string,string,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(QuestContractCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the QuestContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the createNFTReward(string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createNftReward(args: MethodArgs<'createNFTReward(string)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuestContractCallFactory.createNftReward(args, params))
  }

  /**
   * Calls the optIntoAsset()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optIntoAsset(args: MethodArgs<'optIntoAsset()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuestContractCallFactory.optIntoAsset(args, params))
  }

  /**
   * Calls the sendRewardWinner1(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendRewardWinner1(args: MethodArgs<'sendRewardWinner1(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuestContractCallFactory.sendRewardWinner1(args, params))
  }

  /**
   * Calls the sendRewardWinner2(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendRewardWinner2(args: MethodArgs<'sendRewardWinner2(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuestContractCallFactory.sendRewardWinner2(args, params))
  }

  /**
   * Calls the sendRewardWinner3(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendRewardWinner3(args: MethodArgs<'sendRewardWinner3(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(QuestContractCallFactory.sendRewardWinner3(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<QuestContract['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get questTitle() {
        return QuestContractClient.getBinaryState(state, 'questTitle')
      },
      get questLocation() {
        return QuestContractClient.getBinaryState(state, 'questLocation')
      },
      get winner1() {
        return QuestContractClient.getBinaryState(state, 'winner1')
      },
      get winner2() {
        return QuestContractClient.getBinaryState(state, 'winner2')
      },
      get winner3() {
        return QuestContractClient.getBinaryState(state, 'winner3')
      },
      get expiryDate() {
        return QuestContractClient.getIntegerState(state, 'expiryDate')
      },
      get reward1() {
        return QuestContractClient.getIntegerState(state, 'reward1')
      },
    }
  }

  public compose(): QuestContractComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createNftReward(args: MethodArgs<'createNFTReward(string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createNftReward(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optIntoAsset(args: MethodArgs<'optIntoAsset()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optIntoAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendRewardWinner1(args: MethodArgs<'sendRewardWinner1(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendRewardWinner1(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendRewardWinner2(args: MethodArgs<'sendRewardWinner2(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendRewardWinner2(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendRewardWinner3(args: MethodArgs<'sendRewardWinner3(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendRewardWinner3(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as QuestContractComposer
  }
}
export type QuestContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createNFTReward(string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNftReward(args: MethodArgs<'createNFTReward(string)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuestContractComposer<[...TReturns, MethodReturn<'createNFTReward(string)uint64'>]>

  /**
   * Calls the optIntoAsset()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIntoAsset(args: MethodArgs<'optIntoAsset()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuestContractComposer<[...TReturns, MethodReturn<'optIntoAsset()void'>]>

  /**
   * Calls the sendRewardWinner1(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendRewardWinner1(args: MethodArgs<'sendRewardWinner1(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuestContractComposer<[...TReturns, MethodReturn<'sendRewardWinner1(address)void'>]>

  /**
   * Calls the sendRewardWinner2(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendRewardWinner2(args: MethodArgs<'sendRewardWinner2(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuestContractComposer<[...TReturns, MethodReturn<'sendRewardWinner2(address)void'>]>

  /**
   * Calls the sendRewardWinner3(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendRewardWinner3(args: MethodArgs<'sendRewardWinner3(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): QuestContractComposer<[...TReturns, MethodReturn<'sendRewardWinner3(address)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the QuestContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): QuestContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): QuestContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<QuestContractComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<QuestContractComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type QuestContractComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type QuestContractComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
