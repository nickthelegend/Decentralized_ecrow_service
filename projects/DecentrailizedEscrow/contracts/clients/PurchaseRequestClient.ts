/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(string,string,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "submitBid(uint64,uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "acceptBid(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendFunds(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "confirm_dispatch(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "confirm_delivery_received()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "cancel_request()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "receive_order()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "product": {
          "type": "bytes",
          "key": "product"
        },
        "quantity": {
          "type": "bytes",
          "key": "quantity"
        },
        "requestCounter": {
          "type": "uint64",
          "key": "requestCounter"
        },
        "bidCounter": {
          "type": "uint64",
          "key": "bidCounter"
        },
        "deadline": {
          "type": "uint64",
          "key": "deadline"
        },
        "max_budget": {
          "type": "uint64",
          "key": "max_budget"
        },
        "creator": {
          "type": "bytes",
          "key": "creator"
        },
        "selected_vendor": {
          "type": "bytes",
          "key": "selected_vendor"
        },
        "delivery_status": {
          "type": "bytes",
          "key": "delivery_status"
        },
        "dispatch_date": {
          "type": "uint64",
          "key": "dispatch_date"
        },
        "recieved_date": {
          "type": "uint64",
          "key": "recieved_date"
        },
        "depositedAmount": {
          "type": "uint64",
          "key": "depositedAmount"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 5,
      "num_uints": 7
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "PurchaseRequest",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "product",
            "type": "string"
          },
          {
            "name": "quantity",
            "type": "string"
          },
          {
            "name": "deadline",
            "type": "uint64"
          },
          {
            "name": "max_budget",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "submitBid",
        "args": [
          {
            "name": "amount",
            "type": "uint64"
          },
          {
            "name": "deliveryTime",
            "type": "uint64"
          },
          {
            "name": "description",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "acceptBid",
        "args": [
          {
            "name": "vendorAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendFunds",
        "args": [
          {
            "name": "payment",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "confirm_dispatch",
        "args": [
          {
            "name": "companyAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "confirm_delivery_received",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "cancel_request",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "receive_order",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the PurchaseRequest smart contract.
 */
export type PurchaseRequest = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string,string,uint64,uint64)void' | 'createApplication', {
      argsObj: {
        product: string
        quantity: string
        deadline: bigint | number
        max_budget: bigint | number
      }
      argsTuple: [product: string, quantity: string, deadline: bigint | number, max_budget: bigint | number]
      returns: void
    }>
    & Record<'submitBid(uint64,uint64,string)void' | 'submitBid', {
      argsObj: {
        amount: bigint | number
        deliveryTime: bigint | number
        description: string
      }
      argsTuple: [amount: bigint | number, deliveryTime: bigint | number, description: string]
      returns: void
    }>
    & Record<'acceptBid(address)void' | 'acceptBid', {
      argsObj: {
        vendorAddress: string
      }
      argsTuple: [vendorAddress: string]
      returns: void
    }>
    & Record<'sendFunds(pay)void' | 'sendFunds', {
      argsObj: {
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'confirm_dispatch(address)void' | 'confirm_dispatch', {
      argsObj: {
        companyAddress: string
      }
      argsTuple: [companyAddress: string]
      returns: void
    }>
    & Record<'confirm_delivery_received()void' | 'confirm_delivery_received', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'cancel_request()void' | 'cancel_request', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'receive_order()void' | 'receive_order', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'product'?: BinaryState
      'quantity'?: BinaryState
      'requestCounter'?: IntegerState
      'bidCounter'?: IntegerState
      'deadline'?: IntegerState
      'max_budget'?: IntegerState
      'creator'?: BinaryState
      'selected_vendor'?: BinaryState
      'delivery_status'?: BinaryState
      'dispatch_date'?: IntegerState
      'recieved_date'?: IntegerState
      'depositedAmount'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type PurchaseRequestSig = keyof PurchaseRequest['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends PurchaseRequestSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the PurchaseRequest smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends PurchaseRequestSig> = PurchaseRequest['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the PurchaseRequest smart contract to the method's return type
 */
export type MethodReturn<TSignature extends PurchaseRequestSig> = PurchaseRequest['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type PurchaseRequestCreateCalls = (typeof PurchaseRequestCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type PurchaseRequestCreateCallParams =
  | (TypedCallParams<'createApplication(string,string,uint64,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type PurchaseRequestDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: PurchaseRequestCreateCalls) => PurchaseRequestCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class PurchaseRequestCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the PurchaseRequest smart contract using the createApplication(string,string,uint64,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(string,string,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(string,string,uint64,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.product, args.quantity, args.deadline, args.max_budget],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the submitBid(uint64,uint64,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static submitBid(args: MethodArgs<'submitBid(uint64,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'submitBid(uint64,uint64,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amount, args.deliveryTime, args.description],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the acceptBid(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static acceptBid(args: MethodArgs<'acceptBid(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'acceptBid(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.vendorAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendFunds(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendFunds(args: MethodArgs<'sendFunds(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendFunds(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the confirm_dispatch(address)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static confirmDispatch(args: MethodArgs<'confirm_dispatch(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'confirm_dispatch(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.companyAddress],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the confirm_delivery_received()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static confirmDeliveryReceived(args: MethodArgs<'confirm_delivery_received()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'confirm_delivery_received()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the cancel_request()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static cancelRequest(args: MethodArgs<'cancel_request()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'cancel_request()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the receive_order()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static receiveOrder(args: MethodArgs<'receive_order()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'receive_order()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the PurchaseRequest smart contract
 */
export class PurchaseRequestClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `PurchaseRequestClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof PurchaseRequest['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the PurchaseRequest smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: PurchaseRequestDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(PurchaseRequestCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the PurchaseRequest smart contract using the createApplication(string,string,uint64,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(string,string,uint64,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(string,string,uint64,uint64)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(PurchaseRequestCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the PurchaseRequest smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the submitBid(uint64,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public submitBid(args: MethodArgs<'submitBid(uint64,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PurchaseRequestCallFactory.submitBid(args, params))
  }

  /**
   * Calls the acceptBid(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public acceptBid(args: MethodArgs<'acceptBid(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PurchaseRequestCallFactory.acceptBid(args, params))
  }

  /**
   * Calls the sendFunds(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendFunds(args: MethodArgs<'sendFunds(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PurchaseRequestCallFactory.sendFunds(args, params))
  }

  /**
   * Calls the confirm_dispatch(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public confirmDispatch(args: MethodArgs<'confirm_dispatch(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PurchaseRequestCallFactory.confirmDispatch(args, params))
  }

  /**
   * Calls the confirm_delivery_received()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public confirmDeliveryReceived(args: MethodArgs<'confirm_delivery_received()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PurchaseRequestCallFactory.confirmDeliveryReceived(args, params))
  }

  /**
   * Calls the cancel_request()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public cancelRequest(args: MethodArgs<'cancel_request()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PurchaseRequestCallFactory.cancelRequest(args, params))
  }

  /**
   * Calls the receive_order()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public receiveOrder(args: MethodArgs<'receive_order()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(PurchaseRequestCallFactory.receiveOrder(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<PurchaseRequest['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get product() {
        return PurchaseRequestClient.getBinaryState(state, 'product')
      },
      get quantity() {
        return PurchaseRequestClient.getBinaryState(state, 'quantity')
      },
      get requestCounter() {
        return PurchaseRequestClient.getIntegerState(state, 'requestCounter')
      },
      get bidCounter() {
        return PurchaseRequestClient.getIntegerState(state, 'bidCounter')
      },
      get deadline() {
        return PurchaseRequestClient.getIntegerState(state, 'deadline')
      },
      get max_budget() {
        return PurchaseRequestClient.getIntegerState(state, 'max_budget')
      },
      get creator() {
        return PurchaseRequestClient.getBinaryState(state, 'creator')
      },
      get selected_vendor() {
        return PurchaseRequestClient.getBinaryState(state, 'selected_vendor')
      },
      get delivery_status() {
        return PurchaseRequestClient.getBinaryState(state, 'delivery_status')
      },
      get dispatch_date() {
        return PurchaseRequestClient.getIntegerState(state, 'dispatch_date')
      },
      get recieved_date() {
        return PurchaseRequestClient.getIntegerState(state, 'recieved_date')
      },
      get depositedAmount() {
        return PurchaseRequestClient.getIntegerState(state, 'depositedAmount')
      },
    }
  }

  public compose(): PurchaseRequestComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      submitBid(args: MethodArgs<'submitBid(uint64,uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.submitBid(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      acceptBid(args: MethodArgs<'acceptBid(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.acceptBid(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendFunds(args: MethodArgs<'sendFunds(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendFunds(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      confirmDispatch(args: MethodArgs<'confirm_dispatch(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.confirmDispatch(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      confirmDeliveryReceived(args: MethodArgs<'confirm_delivery_received()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.confirmDeliveryReceived(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      cancelRequest(args: MethodArgs<'cancel_request()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.cancelRequest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      receiveOrder(args: MethodArgs<'receive_order()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.receiveOrder(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as PurchaseRequestComposer
  }
}
export type PurchaseRequestComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the submitBid(uint64,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  submitBid(args: MethodArgs<'submitBid(uint64,uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PurchaseRequestComposer<[...TReturns, MethodReturn<'submitBid(uint64,uint64,string)void'>]>

  /**
   * Calls the acceptBid(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  acceptBid(args: MethodArgs<'acceptBid(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PurchaseRequestComposer<[...TReturns, MethodReturn<'acceptBid(address)void'>]>

  /**
   * Calls the sendFunds(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendFunds(args: MethodArgs<'sendFunds(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PurchaseRequestComposer<[...TReturns, MethodReturn<'sendFunds(pay)void'>]>

  /**
   * Calls the confirm_dispatch(address)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  confirmDispatch(args: MethodArgs<'confirm_dispatch(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PurchaseRequestComposer<[...TReturns, MethodReturn<'confirm_dispatch(address)void'>]>

  /**
   * Calls the confirm_delivery_received()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  confirmDeliveryReceived(args: MethodArgs<'confirm_delivery_received()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PurchaseRequestComposer<[...TReturns, MethodReturn<'confirm_delivery_received()void'>]>

  /**
   * Calls the cancel_request()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  cancelRequest(args: MethodArgs<'cancel_request()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PurchaseRequestComposer<[...TReturns, MethodReturn<'cancel_request()void'>]>

  /**
   * Calls the receive_order()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  receiveOrder(args: MethodArgs<'receive_order()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): PurchaseRequestComposer<[...TReturns, MethodReturn<'receive_order()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the PurchaseRequest smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): PurchaseRequestComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): PurchaseRequestComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<PurchaseRequestComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<PurchaseRequestComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type PurchaseRequestComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type PurchaseRequestComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
