/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"EventManager","desc":"","methods":[{"name":"createApplication","args":[{"name":"maintainerAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createEvent","args":[{"name":"eventConfig","type":"(uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64)","struct":"EventConfig"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"EventConfig":[{"name":"eventId","type":"uint64"},{"name":"eventName","type":"string"},{"name":"eventCategory","type":"string"},{"name":"eventCreator","type":"address"},{"name":"maxParticipants","type":"uint64"},{"name":"location","type":"string"},{"name":"startTime","type":"uint64"},{"name":"endTime","type":"uint64"},{"name":"registeredCount","type":"uint64"},{"name":"eventAppId","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"maintainerAddress":{"key":"bWFpbnRhaW5lckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"totalEvents":{"key":"dG90YWxFdmVudHM=","keyType":"AVMBytes","valueType":"uint64"},"lastEventID":{"key":"bGFzdEV2ZW50SUQ=","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"allEvents":{"keyType":"uint64","valueType":"EventConfig","prefix":"ZQ=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\EventManager.algo.ts:21","pc":[0]},{"teal":2,"source":"contracts\\EventManager.algo.ts:21","pc":[1,2,3,4]},{"teal":3,"source":"contracts\\EventManager.algo.ts:21","pc":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]},{"teal":15,"source":"contracts\\EventManager.algo.ts:21","pc":[31,32]},{"teal":16,"source":"contracts\\EventManager.algo.ts:21","pc":[33]},{"teal":17,"source":"contracts\\EventManager.algo.ts:21","pc":[34,35]},{"teal":18,"source":"contracts\\EventManager.algo.ts:21","pc":[36]},{"teal":19,"source":"contracts\\EventManager.algo.ts:21","pc":[37,38]},{"teal":20,"source":"contracts\\EventManager.algo.ts:21","pc":[39]},{"teal":21,"source":"contracts\\EventManager.algo.ts:21","pc":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65]},{"teal":25,"source":"contracts\\EventManager.algo.ts:21","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[66]},{"teal":30,"source":"contracts\\EventManager.algo.ts:29","pc":[67,68,69]},{"teal":31,"source":"contracts\\EventManager.algo.ts:29","pc":[70]},{"teal":32,"source":"contracts\\EventManager.algo.ts:29","pc":[71]},{"teal":33,"source":"contracts\\EventManager.algo.ts:29","pc":[72,73]},{"teal":34,"source":"contracts\\EventManager.algo.ts:29","pc":[74]},{"teal":37,"source":"contracts\\EventManager.algo.ts:29","errorMessage":"argument 0 (maintainerAddress) for createApplication must be a address","pc":[75]},{"teal":40,"source":"contracts\\EventManager.algo.ts:29","pc":[76,77,78]},{"teal":41,"source":"contracts\\EventManager.algo.ts:29","pc":[79]},{"teal":42,"source":"contracts\\EventManager.algo.ts:29","pc":[80]},{"teal":46,"source":"contracts\\EventManager.algo.ts:29","pc":[81,82,83]},{"teal":50,"source":"contracts\\EventManager.algo.ts:30","pc":[84]},{"teal":51,"source":"contracts\\EventManager.algo.ts:30","pc":[85]},{"teal":52,"source":"contracts\\EventManager.algo.ts:30","pc":[86]},{"teal":56,"source":"contracts\\EventManager.algo.ts:31","pc":[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105]},{"teal":57,"source":"contracts\\EventManager.algo.ts:31","pc":[106,107]},{"teal":58,"source":"contracts\\EventManager.algo.ts:31","pc":[108]},{"teal":62,"source":"contracts\\EventManager.algo.ts:32","pc":[109]},{"teal":63,"source":"contracts\\EventManager.algo.ts:32","pc":[110]},{"teal":64,"source":"contracts\\EventManager.algo.ts:32","pc":[111]},{"teal":65,"source":"contracts\\EventManager.algo.ts:29","pc":[112]},{"teal":70,"source":"contracts\\EventManager.algo.ts:35","pc":[113,114,115]},{"teal":73,"source":"contracts\\EventManager.algo.ts:35","pc":[116,117,118]},{"teal":74,"source":"contracts\\EventManager.algo.ts:35","pc":[119]},{"teal":75,"source":"contracts\\EventManager.algo.ts:35","pc":[120]},{"teal":79,"source":"contracts\\EventManager.algo.ts:35","pc":[121,122,123]},{"teal":83,"source":"contracts\\EventManager.algo.ts:37","pc":[124]},{"teal":84,"source":"contracts\\EventManager.algo.ts:37","pc":[125]},{"teal":85,"source":"contracts\\EventManager.algo.ts:37","pc":[126]},{"teal":86,"source":"contracts\\EventManager.algo.ts:37","pc":[127]},{"teal":87,"source":"contracts\\EventManager.algo.ts:37","pc":[128]},{"teal":88,"source":"contracts\\EventManager.algo.ts:37","pc":[129]},{"teal":89,"source":"contracts\\EventManager.algo.ts:37","pc":[130]},{"teal":93,"source":"contracts\\EventManager.algo.ts:38","pc":[131]},{"teal":94,"source":"contracts\\EventManager.algo.ts:38","pc":[132]},{"teal":95,"source":"contracts\\EventManager.algo.ts:38","pc":[133]},{"teal":96,"source":"contracts\\EventManager.algo.ts:38","pc":[134]},{"teal":97,"source":"contracts\\EventManager.algo.ts:38","pc":[135]},{"teal":98,"source":"contracts\\EventManager.algo.ts:38","pc":[136]},{"teal":99,"source":"contracts\\EventManager.algo.ts:38","pc":[137]},{"teal":103,"source":"contracts\\EventManager.algo.ts:39","pc":[138,139,140]},{"teal":104,"source":"contracts\\EventManager.algo.ts:39","pc":[141]},{"teal":105,"source":"contracts\\EventManager.algo.ts:39","pc":[142]},{"teal":106,"source":"contracts\\EventManager.algo.ts:39","pc":[143]},{"teal":107,"source":"contracts\\EventManager.algo.ts:39","pc":[144]},{"teal":108,"source":"contracts\\EventManager.algo.ts:39","pc":[145]},{"teal":109,"source":"contracts\\EventManager.algo.ts:39","pc":[146]},{"teal":110,"source":"contracts\\EventManager.algo.ts:39","pc":[147]},{"teal":111,"source":"contracts\\EventManager.algo.ts:39","pc":[148,149]},{"teal":112,"source":"contracts\\EventManager.algo.ts:39","pc":[150]},{"teal":113,"source":"contracts\\EventManager.algo.ts:35","pc":[151]},{"teal":116,"source":"contracts\\EventManager.algo.ts:21","pc":[152,153,154,155,156,157]},{"teal":117,"source":"contracts\\EventManager.algo.ts:21","pc":[158,159,160]},{"teal":118,"source":"contracts\\EventManager.algo.ts:21","pc":[161,162,163,164]},{"teal":121,"source":"contracts\\EventManager.algo.ts:21","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[165]},{"teal":124,"source":"contracts\\EventManager.algo.ts:21","pc":[166,167,168,169,170,171]},{"teal":125,"source":"contracts\\EventManager.algo.ts:21","pc":[172,173,174]},{"teal":126,"source":"contracts\\EventManager.algo.ts:21","pc":[175,176,177,178]},{"teal":129,"source":"contracts\\EventManager.algo.ts:21","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[179]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAKYnl0ZWNibG9jayAweDZjNjE3Mzc0NDU3NjY1NmU3NDQ5NDQgMHg3NDZmNzQ2MTZjNDU3NjY1NmU3NDczCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjEwNi4zCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyl2b2lkCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBtYWludGFpbmVyQWRkcmVzczogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCXB1c2hpbnQgMzIKCT09CgoJLy8gYXJndW1lbnQgMCAobWFpbnRhaW5lckFkZHJlc3MpIGZvciBjcmVhdGVBcHBsaWNhdGlvbiBtdXN0IGJlIGEgYWRkcmVzcwoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzKXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKG1haW50YWluZXJBZGRyZXNzOiBBZGRyZXNzKTogdm9pZApjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xFdmVudE1hbmFnZXIuYWxnby50czozMAoJLy8gdGhpcy50b3RhbEV2ZW50cy52YWx1ZSA9IDAKCWJ5dGVjIDEgLy8gICJ0b3RhbEV2ZW50cyIKCWludGMgMSAvLyAwCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xFdmVudE1hbmFnZXIuYWxnby50czozMQoJLy8gdGhpcy5tYWludGFpbmVyQWRkcmVzcy52YWx1ZSA9IG1haW50YWluZXJBZGRyZXNzCglwdXNoYnl0ZXMgMHg2ZDYxNjk2ZTc0NjE2OTZlNjU3MjQxNjQ2NDcyNjU3MzczIC8vICJtYWludGFpbmVyQWRkcmVzcyIKCWZyYW1lX2RpZyAtMSAvLyBtYWludGFpbmVyQWRkcmVzczogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcRXZlbnRNYW5hZ2VyLmFsZ28udHM6MzIKCS8vIHRoaXMubGFzdEV2ZW50SUQudmFsdWUgPSAwCglieXRlYyAwIC8vICAibGFzdEV2ZW50SUQiCglpbnRjIDEgLy8gMAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gY3JlYXRlRXZlbnQoKHVpbnQ2NCxzdHJpbmcsc3RyaW5nLGFkZHJlc3MsdWludDY0LHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVFdmVudDoKCS8vIGV2ZW50Q29uZmlnOiAodWludDY0LHN0cmluZyxzdHJpbmcsYWRkcmVzcyx1aW50NjQsc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCgkvLyBleGVjdXRlIGNyZWF0ZUV2ZW50KCh1aW50NjQsc3RyaW5nLHN0cmluZyxhZGRyZXNzLHVpbnQ2NCxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSl2b2lkCgljYWxsc3ViIGNyZWF0ZUV2ZW50CglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBjcmVhdGVFdmVudChldmVudENvbmZpZzogRXZlbnRDb25maWcpOiB2b2lkCmNyZWF0ZUV2ZW50OgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXEV2ZW50TWFuYWdlci5hbGdvLnRzOjM3CgkvLyB0aGlzLmxhc3RFdmVudElELnZhbHVlICs9IDEKCWJ5dGVjIDAgLy8gICJsYXN0RXZlbnRJRCIKCWFwcF9nbG9iYWxfZ2V0CglpbnRjIDAgLy8gMQoJKwoJYnl0ZWMgMCAvLyAgImxhc3RFdmVudElEIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcRXZlbnRNYW5hZ2VyLmFsZ28udHM6MzgKCS8vIHRoaXMudG90YWxFdmVudHMudmFsdWUgKz0xCglieXRlYyAxIC8vICAidG90YWxFdmVudHMiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDEKCSsKCWJ5dGVjIDEgLy8gICJ0b3RhbEV2ZW50cyIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXEV2ZW50TWFuYWdlci5hbGdvLnRzOjM5CgkvLyB0aGlzLmFsbEV2ZW50cyh0aGlzLmxhc3RFdmVudElELnZhbHVlKS52YWx1ZSA9IGV2ZW50Q29uZmlnCglwdXNoYnl0ZXMgMHg2NSAvLyAiZSIKCWJ5dGVjIDAgLy8gICJsYXN0RXZlbnRJRCIKCWFwcF9nbG9iYWxfZ2V0CglpdG9iCgljb25jYXQKCWR1cAoJYm94X2RlbAoJcG9wCglmcmFtZV9kaWcgLTEgLy8gZXZlbnRDb25maWc6IEV2ZW50Q29uZmlnCglib3hfcHV0CglyZXRzdWIKCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweGQzMjRiZWE0IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4MzQ1NDIxMmMgLy8gbWV0aG9kICJjcmVhdGVFdmVudCgodWludDY0LHN0cmluZyxzdHJpbmcsYWRkcmVzcyx1aW50NjQsc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlRXZlbnQKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiACAQAmAgtsYXN0RXZlbnRJRAt0b3RhbEV2ZW50czEYFIEGCzEZCI0MAGQAAAAAAAAAAAAAAFYAAAAAAAAAAAAAADYaAUkVgSASRIgAAiJDigEAKSNngBFtYWludGFpbmVyQWRkcmVzc4v/ZygjZ4k2GgGIAAIiQ4oBAChkIggoTGcpZCIIKUxngAFlKGQWUEm8SIv/v4mABNMkvqQ2GgCOAf+eAIAENFQhLDYaAI4B/74A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type EventConfig = {
  eventId: bigint,
  eventName: string,
  eventCategory: string,
  eventCreator: string,
  maxParticipants: bigint,
  location: string,
  startTime: bigint,
  endTime: bigint,
  registeredCount: bigint,
  eventAppId: bigint
}


/**
 * Converts the ABI tuple representation of a EventConfig to the struct representation
 */
export function EventConfigFromTuple(abiTuple: [bigint, string, string, string, bigint, string, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.EventConfig, APP_SPEC.structs) as EventConfig
}

/**
 * The argument types for the EventManager contract
 */
export type EventManagerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address)void': {
      maintainerAddress: string
    }
    'createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void': {
      eventConfig: EventConfig
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address)void': [maintainerAddress: string]
    'createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void': [eventConfig: EventConfig]
  }
}

/**
 * The return type for each method
 */
export type EventManagerReturns = {
  'createApplication(address)void': void
  'createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void': void
}

/**
 * Defines the types of available calls and state of the EventManager smart contract.
 */
export type EventManagerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address)void' | 'createApplication', {
      argsObj: EventManagerArgs['obj']['createApplication(address)void']
      argsTuple: EventManagerArgs['tuple']['createApplication(address)void']
      returns: EventManagerReturns['createApplication(address)void']
    }>
    & Record<'createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void' | 'createEvent', {
      argsObj: EventManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']
      argsTuple: EventManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']
      returns: EventManagerReturns['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        maintainerAddress: string
        totalEvents: bigint
        lastEventId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        allEvents: Map<bigint | number, EventConfig>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type EventManagerSignatures = keyof EventManagerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type EventManagerNonVoidMethodSignatures = keyof EventManagerTypes['methods'] extends infer T ? T extends keyof EventManagerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the EventManager smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends EventManagerSignatures> = EventManagerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the EventManager smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EventManagerSignatures> = EventManagerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = EventManagerTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = EventManagerTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type EventManagerCreateCallParams =
  | Expand<CallParams<EventManagerArgs['obj']['createApplication(address)void'] | EventManagerArgs['tuple']['createApplication(address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<EventManagerArgs['obj']['createApplication(address)void'] | EventManagerArgs['tuple']['createApplication(address)void']> & {method: 'createApplication(address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type EventManagerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: EventManagerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the EventManager smart contract
 */
export abstract class EventManagerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends EventManagerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address)void':
            return EventManagerParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the EventManager smart contract using the createApplication(address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<EventManagerArgs['obj']['createApplication(address)void'] | EventManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.maintainerAddress],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createEvent(params: CallParams<EventManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | EventManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.eventConfig],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the EventManager smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class EventManagerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `EventManagerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new EventManagerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new EventManagerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the EventManager smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: EventManagerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? EventManagerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (EventManagerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new EventManagerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EventManager smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<EventManagerArgs['obj']['createApplication(address)void'] | EventManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(EventManagerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EventManager smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<EventManagerArgs['obj']['createApplication(address)void'] | EventManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(EventManagerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the EventManager smart contract using an ABI method call using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<EventManagerArgs['obj']['createApplication(address)void'] | EventManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(EventManagerParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | EventManagerReturns['createApplication(address)void']) }, appClient: new EventManagerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the EventManager smart contract
 */
export class EventManagerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `EventManagerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the EventManager app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `EventManagerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends EventManagerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `EventManagerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<EventManagerClient> {
    return new EventManagerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `EventManagerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<EventManagerClient> {
    return new EventManagerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the EventManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the EventManager smart contract using the `createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createEvent: (params: CallParams<EventManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | EventManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EventManagerParamsFactory.createEvent(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the EventManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the EventManager smart contract using the `createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createEvent: (params: CallParams<EventManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | EventManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EventManagerParamsFactory.createEvent(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the EventManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the EventManager smart contract using the `createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createEvent: async (params: CallParams<EventManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | EventManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EventManagerParamsFactory.createEvent(params))
      return {...result, return: result.return as unknown as (undefined | EventManagerReturns['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new EventManagerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current EventManager app
   */
  state = {
    /**
     * Methods to access global state for the current EventManager app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          maintainerAddress: result.maintainerAddress,
          totalEvents: result.totalEvents,
          lastEventId: result.lastEventID,
        }
      },
      /**
       * Get the current value of the maintainerAddress key in global state
       */
      maintainerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("maintainerAddress")) as string | undefined },
      /**
       * Get the current value of the totalEvents key in global state
       */
      totalEvents: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalEvents")) as bigint | undefined },
      /**
       * Get the current value of the lastEventID key in global state
       */
      lastEventId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastEventID")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current EventManager app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the allEvents map in box state
       */
      allEvents: {
        /**
         * Get all current values of the allEvents map in box state
         */
        getMap: async (): Promise<Map<bigint, EventConfig>> => { return (await this.appClient.state.box.getMap("allEvents")) as Map<bigint, EventConfig> },
        /**
         * Get a current value of the allEvents map by key from box state
         */
        value: async (key: bigint | number): Promise<EventConfig | undefined> => { return await this.appClient.state.box.getMapValue("allEvents", key) as EventConfig | undefined },
      },
    },
  }

  public newGroup(): EventManagerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void method call against the EventManager contract
       */
      createEvent(params: CallParams<EventManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | EventManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createEvent(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the EventManager contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as EventManagerComposer
  }
}
export type EventManagerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createEvent(params?: CallParams<EventManagerArgs['obj']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | EventManagerArgs['tuple']['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void']>): EventManagerComposer<[...TReturns, EventManagerReturns['createEvent((uint64,string,string,address,uint64,string,uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the EventManager smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): EventManagerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): EventManagerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<EventManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<EventManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<EventManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<EventManagerComposerResults<TReturns>>
}
export type EventManagerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

