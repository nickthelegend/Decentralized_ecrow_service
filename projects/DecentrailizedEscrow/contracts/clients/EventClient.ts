/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Event","desc":"","methods":[{"name":"createApplication","args":[{"name":"eventName","type":"string"},{"name":"location","type":"string"},{"name":"startTime","type":"uint64"},{"name":"endTime","type":"uint64"},{"name":"registeredCount","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"registerEvent","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":3,"ints":3},"local":{"bytes":0,"ints":0}},"keys":{"global":{"creatorAddress":{"key":"Y3JlYXRvckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"eventName":{"key":"ZXZlbnROYW1l","keyType":"AVMBytes","valueType":"string"},"location":{"key":"bG9jYXRpb24=","keyType":"AVMBytes","valueType":"string"},"startTime":{"key":"c3RhcnRUaW1l","keyType":"AVMBytes","valueType":"uint64"},"endTime":{"key":"ZW5kVGltZQ==","keyType":"AVMBytes","valueType":"uint64"},"registeredCount":{"key":"cmVnaXN0ZXJlZENvdW50","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"registeredMap":{"keyType":"address","valueType":"byte[32]","prefix":"Yw=="}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Event.algo.ts:24","pc":[0]},{"teal":2,"source":"contracts\\Event.algo.ts:24","pc":[1,2,3]},{"teal":3,"source":"contracts\\Event.algo.ts:24","pc":[4,5,6,7]},{"teal":15,"source":"contracts\\Event.algo.ts:24","pc":[8,9]},{"teal":16,"source":"contracts\\Event.algo.ts:24","pc":[10]},{"teal":17,"source":"contracts\\Event.algo.ts:24","pc":[11,12]},{"teal":18,"source":"contracts\\Event.algo.ts:24","pc":[13]},{"teal":19,"source":"contracts\\Event.algo.ts:24","pc":[14,15]},{"teal":20,"source":"contracts\\Event.algo.ts:24","pc":[16]},{"teal":21,"source":"contracts\\Event.algo.ts:24","pc":[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]},{"teal":25,"source":"contracts\\Event.algo.ts:24","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[43]},{"teal":30,"source":"contracts\\Event.algo.ts:37","pc":[44,45,46]},{"teal":31,"source":"contracts\\Event.algo.ts:37","pc":[47]},{"teal":34,"source":"contracts\\Event.algo.ts:37","pc":[48,49,50]},{"teal":35,"source":"contracts\\Event.algo.ts:37","pc":[51]},{"teal":38,"source":"contracts\\Event.algo.ts:37","pc":[52,53,54]},{"teal":39,"source":"contracts\\Event.algo.ts:37","pc":[55]},{"teal":42,"source":"contracts\\Event.algo.ts:37","pc":[56,57,58]},{"teal":43,"source":"contracts\\Event.algo.ts:37","pc":[59,60,61]},{"teal":46,"source":"contracts\\Event.algo.ts:37","pc":[62,63,64]},{"teal":47,"source":"contracts\\Event.algo.ts:37","pc":[65,66,67]},{"teal":50,"source":"contracts\\Event.algo.ts:37","pc":[68,69,70]},{"teal":51,"source":"contracts\\Event.algo.ts:37","pc":[71]},{"teal":52,"source":"contracts\\Event.algo.ts:37","pc":[72]},{"teal":56,"source":"contracts\\Event.algo.ts:37","pc":[73,74,75]},{"teal":60,"source":"contracts\\Event.algo.ts:39","pc":[76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91]},{"teal":61,"source":"contracts\\Event.algo.ts:39","pc":[92,93]},{"teal":62,"source":"contracts\\Event.algo.ts:39","pc":[94]},{"teal":66,"source":"contracts\\Event.algo.ts:40","pc":[95,96,97,98,99,100,101,102,103,104,105]},{"teal":67,"source":"contracts\\Event.algo.ts:40","pc":[106,107]},{"teal":68,"source":"contracts\\Event.algo.ts:40","pc":[108]},{"teal":69,"source":"contracts\\Event.algo.ts:40","pc":[109]},{"teal":70,"source":"contracts\\Event.algo.ts:40","pc":[110]},{"teal":71,"source":"contracts\\Event.algo.ts:40","pc":[111,112,113]},{"teal":72,"source":"contracts\\Event.algo.ts:40","pc":[114]},{"teal":73,"source":"contracts\\Event.algo.ts:40","pc":[115]},{"teal":74,"source":"contracts\\Event.algo.ts:40","pc":[116]},{"teal":78,"source":"contracts\\Event.algo.ts:41","pc":[117,118,119,120,121,122,123,124,125,126]},{"teal":79,"source":"contracts\\Event.algo.ts:41","pc":[127,128]},{"teal":80,"source":"contracts\\Event.algo.ts:41","pc":[129]},{"teal":81,"source":"contracts\\Event.algo.ts:41","pc":[130]},{"teal":82,"source":"contracts\\Event.algo.ts:41","pc":[131]},{"teal":83,"source":"contracts\\Event.algo.ts:41","pc":[132,133,134]},{"teal":84,"source":"contracts\\Event.algo.ts:41","pc":[135]},{"teal":85,"source":"contracts\\Event.algo.ts:41","pc":[136]},{"teal":86,"source":"contracts\\Event.algo.ts:41","pc":[137]},{"teal":90,"source":"contracts\\Event.algo.ts:42","pc":[138,139,140,141,142,143,144,145,146]},{"teal":91,"source":"contracts\\Event.algo.ts:42","pc":[147,148]},{"teal":92,"source":"contracts\\Event.algo.ts:42","pc":[149]},{"teal":96,"source":"contracts\\Event.algo.ts:43","pc":[150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166]},{"teal":97,"source":"contracts\\Event.algo.ts:43","pc":[167,168]},{"teal":98,"source":"contracts\\Event.algo.ts:43","pc":[169]},{"teal":99,"source":"contracts\\Event.algo.ts:37","pc":[170]},{"teal":104,"source":"contracts\\Event.algo.ts:49","pc":[171,172,173]},{"teal":105,"source":"contracts\\Event.algo.ts:49","pc":[174]},{"teal":106,"source":"contracts\\Event.algo.ts:49","pc":[175]},{"teal":110,"source":"contracts\\Event.algo.ts:49","pc":[176,177,178]},{"teal":114,"source":"contracts\\Event.algo.ts:52","pc":[179]},{"teal":115,"source":"contracts\\Event.algo.ts:52","pc":[180,181]},{"teal":116,"source":"contracts\\Event.algo.ts:52","pc":[182]},{"teal":117,"source":"contracts\\Event.algo.ts:52","pc":[183]},{"teal":118,"source":"contracts\\Event.algo.ts:52","pc":[184]},{"teal":119,"source":"contracts\\Event.algo.ts:52","pc":[185]},{"teal":120,"source":"contracts\\Event.algo.ts:52","pc":[186]},{"teal":123,"source":"contracts\\Event.algo.ts:52","errorMessage":"already claimed","pc":[187]},{"teal":127,"source":"contracts\\Event.algo.ts:54","pc":[188]},{"teal":128,"source":"contracts\\Event.algo.ts:54","pc":[189,190]},{"teal":129,"source":"contracts\\Event.algo.ts:54","pc":[191]},{"teal":130,"source":"contracts\\Event.algo.ts:54","pc":[192,193]},{"teal":131,"source":"contracts\\Event.algo.ts:54","pc":[194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227]},{"teal":132,"source":"contracts\\Event.algo.ts:54","pc":[228]},{"teal":133,"source":"contracts\\Event.algo.ts:54","pc":[229]},{"teal":134,"source":"contracts\\Event.algo.ts:54","pc":[230,231,232]},{"teal":135,"source":"contracts\\Event.algo.ts:54","pc":[233,234]},{"teal":136,"source":"contracts\\Event.algo.ts:54","pc":[235]},{"teal":137,"source":"contracts\\Event.algo.ts:54","pc":[236]},{"teal":138,"source":"contracts\\Event.algo.ts:54","pc":[237,238,239]},{"teal":139,"source":"contracts\\Event.algo.ts:54","pc":[240]},{"teal":140,"source":"contracts\\Event.algo.ts:49","pc":[241]},{"teal":143,"source":"contracts\\Event.algo.ts:24","pc":[242,243,244,245,246,247]},{"teal":144,"source":"contracts\\Event.algo.ts:24","pc":[248,249,250]},{"teal":145,"source":"contracts\\Event.algo.ts:24","pc":[251,252,253,254]},{"teal":148,"source":"contracts\\Event.algo.ts:24","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[255]},{"teal":151,"source":"contracts\\Event.algo.ts:24","pc":[256,257,258,259,260,261]},{"teal":152,"source":"contracts\\Event.algo.ts:24","pc":[262,263,264]},{"teal":153,"source":"contracts\\Event.algo.ts:24","pc":[265,266,267,268]},{"teal":156,"source":"contracts\\Event.algo.ts:24","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[269]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxCmJ5dGVjYmxvY2sgMHg2MwoKLy8gVGhpcyBURUFMIHdhcyBnZW5lcmF0ZWQgYnkgVEVBTFNjcmlwdCB2MC4xMDYuMwovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKcHVzaGludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKHN0cmluZyxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJLy8gcmVnaXN0ZXJlZENvdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDUKCWJ0b2kKCgkvLyBlbmRUaW1lOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDQKCWJ0b2kKCgkvLyBzdGFydFRpbWU6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoKCS8vIGxvY2F0aW9uOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gZXZlbnROYW1lOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgY3JlYXRlQXBwbGljYXRpb24KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKGV2ZW50TmFtZTogc3RyaW5nLCBsb2NhdGlvbjogc3RyaW5nLCBzdGFydFRpbWU6IHVpbnQ2NCwgZW5kVGltZTogdWludDY0LCByZWdpc3RlcmVkQ291bnQ6IHVpbnQ2NCk6IHZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byA1IDAKCgkvLyBjb250cmFjdHNcRXZlbnQuYWxnby50czozOQoJLy8gdGhpcy5jcmVhdG9yQWRkcmVzcy52YWx1ZSA9IHRoaXMudHhuLnNlbmRlcgoJcHVzaGJ5dGVzIDB4NjM3MjY1NjE3NDZmNzI0MTY0NjQ3MjY1NzM3MyAvLyAiY3JlYXRvckFkZHJlc3MiCgl0eG4gU2VuZGVyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xFdmVudC5hbGdvLnRzOjQwCgkvLyB0aGlzLmV2ZW50TmFtZS52YWx1ZSA9IGV2ZW50TmFtZQoJcHVzaGJ5dGVzIDB4NjU3NjY1NmU3NDRlNjE2ZDY1IC8vICJldmVudE5hbWUiCglmcmFtZV9kaWcgLTEgLy8gZXZlbnROYW1lOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xFdmVudC5hbGdvLnRzOjQxCgkvLyB0aGlzLmxvY2F0aW9uLnZhbHVlID0gbG9jYXRpb24KCXB1c2hieXRlcyAweDZjNmY2MzYxNzQ2OTZmNmUgLy8gImxvY2F0aW9uIgoJZnJhbWVfZGlnIC0yIC8vIGxvY2F0aW9uOiBzdHJpbmcKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGNvbnRyYWN0c1xFdmVudC5hbGdvLnRzOjQyCgkvLyB0aGlzLmVuZFRpbWUudmFsdWUgPSBlbmRUaW1lCglwdXNoYnl0ZXMgMHg2NTZlNjQ1NDY5NmQ2NSAvLyAiZW5kVGltZSIKCWZyYW1lX2RpZyAtNCAvLyBlbmRUaW1lOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXEV2ZW50LmFsZ28udHM6NDMKCS8vIHRoaXMucmVnaXN0ZXJlZENvdW50LnZhbHVlID0gMAoJcHVzaGJ5dGVzIDB4NzI2NTY3Njk3Mzc0NjU3MjY1NjQ0MzZmNzU2ZTc0IC8vICJyZWdpc3RlcmVkQ291bnQiCglwdXNoaW50IDAKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIHJlZ2lzdGVyRXZlbnQoKXZvaWQKKmFiaV9yb3V0ZV9yZWdpc3RlckV2ZW50OgoJLy8gZXhlY3V0ZSByZWdpc3RlckV2ZW50KCl2b2lkCgljYWxsc3ViIHJlZ2lzdGVyRXZlbnQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHJlZ2lzdGVyRXZlbnQoKTogdm9pZApyZWdpc3RlckV2ZW50OgoJcHJvdG8gMCAwCgoJLy8gY29udHJhY3RzXEV2ZW50LmFsZ28udHM6NTIKCS8vIGFzc2VydCghdGhpcy5yZWdpc3RlcmVkTWFwKHRoaXMudHhuLnNlbmRlcikuZXhpc3RzLCAnYWxyZWFkeSBjbGFpbWVkJykKCWJ5dGVjIDAgLy8gICJjIgoJdHhuIFNlbmRlcgoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCSEKCgkvLyBhbHJlYWR5IGNsYWltZWQKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xFdmVudC5hbGdvLnRzOjU0CgkvLyB0aGlzLnJlZ2lzdGVyZWRNYXAodGhpcy50eG4uc2VuZGVyKS52YWx1ZSA9IHRoaXMudHhuLnR4SUQgYXMgYnl0ZXMzMgoJYnl0ZWMgMCAvLyAgImMiCgl0eG4gU2VuZGVyCgljb25jYXQKCXR4biBUeElECglwdXNoYnl0ZXMgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwCgljb25jYXQKCWR1cAoJZXh0cmFjdCAzMiAwCglwdXNoYnl0ZXMgMHgKCWI9PQoJYXNzZXJ0CglleHRyYWN0IDAgMzIKCWJveF9wdXQKCXJldHN1YgoKKmNyZWF0ZV9Ob09wOgoJcHVzaGJ5dGVzIDB4ODAwN2YyZGEgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbihzdHJpbmcsc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHg4OTk2NWMzYiAvLyBtZXRob2QgInJlZ2lzdGVyRXZlbnQoKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX3JlZ2lzdGVyRXZlbnQKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiABASYBAWMxGBSBBgsxGQiNDADVAAAAAAAAAAAAAADHAAAAAAAAAAAAAAA2GgUXNhoEFzYaAxc2GgJXAgA2GgFXAgCIAAIiQ4oFAIAOY3JlYXRvckFkZHJlc3MxAGeACWV2ZW50TmFtZYv/SRUWVwYCTFBngAhsb2NhdGlvbov+SRUWVwYCTFBngAdlbmRUaW1li/xngA9yZWdpc3RlcmVkQ291bnSBAGeJiAACIkOKAAAoMQBQvUxIFEQoMQBQMReAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUElXIACAAKhEVwAgv4mABIAH8to2GgCOAf8tAIAEiZZcOzYaAI4B/54A","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Event contract
 */
export type EventArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(string,string,uint64,uint64,uint64)void': {
      eventName: string
      location: string
      startTime: bigint | number
      endTime: bigint | number
      registeredCount: bigint | number
    }
    'registerEvent()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(string,string,uint64,uint64,uint64)void': [eventName: string, location: string, startTime: bigint | number, endTime: bigint | number, registeredCount: bigint | number]
    'registerEvent()void': []
  }
}

/**
 * The return type for each method
 */
export type EventReturns = {
  'createApplication(string,string,uint64,uint64,uint64)void': void
  'registerEvent()void': void
}

/**
 * Defines the types of available calls and state of the Event smart contract.
 */
export type EventTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(string,string,uint64,uint64,uint64)void' | 'createApplication', {
      argsObj: EventArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void']
      argsTuple: EventArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']
      returns: EventReturns['createApplication(string,string,uint64,uint64,uint64)void']
    }>
    & Record<'registerEvent()void' | 'registerEvent', {
      argsObj: EventArgs['obj']['registerEvent()void']
      argsTuple: EventArgs['tuple']['registerEvent()void']
      returns: EventReturns['registerEvent()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        creatorAddress: string
        eventName: string
        location: string
        startTime: bigint
        endTime: bigint
        registeredCount: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        registeredMap: Map<string, Uint8Array>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type EventSignatures = keyof EventTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type EventNonVoidMethodSignatures = keyof EventTypes['methods'] extends infer T ? T extends keyof EventTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Event smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends EventSignatures> = EventTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Event smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EventSignatures> = EventTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = EventTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = EventTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type EventCreateCallParams =
  | Expand<CallParams<EventArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | EventArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<EventArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | EventArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & {method: 'createApplication(string,string,uint64,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type EventDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: EventCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Event smart contract
 */
export abstract class EventParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends EventCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(string,string,uint64,uint64,uint64)void':
            return EventParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Event smart contract using the createApplication(string,string,uint64,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<EventArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | EventArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(string,string,uint64,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.eventName, params.args.location, params.args.startTime, params.args.endTime, params.args.registeredCount],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the registerEvent()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerEvent(params: CallParams<EventArgs['obj']['registerEvent()void'] | EventArgs['tuple']['registerEvent()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'registerEvent()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Event smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class EventFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `EventFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new EventClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new EventClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Event smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: EventDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? EventParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (EventCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new EventClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Event smart contract using the createApplication(string,string,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<EventArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | EventArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(EventParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Event smart contract using the createApplication(string,string,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<EventArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | EventArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(EventParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Event smart contract using an ABI method call using the createApplication(string,string,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<EventArgs['obj']['createApplication(string,string,uint64,uint64,uint64)void'] | EventArgs['tuple']['createApplication(string,string,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(EventParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | EventReturns['createApplication(string,string,uint64,uint64,uint64)void']) }, appClient: new EventClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Event smart contract
 */
export class EventClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `EventClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Event app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `EventClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends EventNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `EventClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<EventClient> {
    return new EventClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `EventClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<EventClient> {
    return new EventClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Event smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Event smart contract using the `registerEvent()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerEvent: (params: CallParams<EventArgs['obj']['registerEvent()void'] | EventArgs['tuple']['registerEvent()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EventParamsFactory.registerEvent(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Event smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Event smart contract using the `registerEvent()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerEvent: (params: CallParams<EventArgs['obj']['registerEvent()void'] | EventArgs['tuple']['registerEvent()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EventParamsFactory.registerEvent(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Event smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Event smart contract using the `registerEvent()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerEvent: async (params: CallParams<EventArgs['obj']['registerEvent()void'] | EventArgs['tuple']['registerEvent()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EventParamsFactory.registerEvent(params))
      return {...result, return: result.return as unknown as (undefined | EventReturns['registerEvent()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new EventClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Event app
   */
  state = {
    /**
     * Methods to access global state for the current Event app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          creatorAddress: result.creatorAddress,
          eventName: result.eventName,
          location: result.location,
          startTime: result.startTime,
          endTime: result.endTime,
          registeredCount: result.registeredCount,
        }
      },
      /**
       * Get the current value of the creatorAddress key in global state
       */
      creatorAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creatorAddress")) as string | undefined },
      /**
       * Get the current value of the eventName key in global state
       */
      eventName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("eventName")) as string | undefined },
      /**
       * Get the current value of the location key in global state
       */
      location: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("location")) as string | undefined },
      /**
       * Get the current value of the startTime key in global state
       */
      startTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("startTime")) as bigint | undefined },
      /**
       * Get the current value of the endTime key in global state
       */
      endTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("endTime")) as bigint | undefined },
      /**
       * Get the current value of the registeredCount key in global state
       */
      registeredCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("registeredCount")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Event app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the registeredMap map in box state
       */
      registeredMap: {
        /**
         * Get all current values of the registeredMap map in box state
         */
        getMap: async (): Promise<Map<string, Uint8Array>> => { return (await this.appClient.state.box.getMap("registeredMap")) as Map<string, Uint8Array> },
        /**
         * Get a current value of the registeredMap map by key from box state
         */
        value: async (key: string): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("registeredMap", key) as Uint8Array | undefined },
      },
    },
  }

  public newGroup(): EventComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a registerEvent()void method call against the Event contract
       */
      registerEvent(params: CallParams<EventArgs['obj']['registerEvent()void'] | EventArgs['tuple']['registerEvent()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerEvent(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Event contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as EventComposer
  }
}
export type EventComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the registerEvent()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerEvent(params?: CallParams<EventArgs['obj']['registerEvent()void'] | EventArgs['tuple']['registerEvent()void']>): EventComposer<[...TReturns, EventReturns['registerEvent()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Event smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): EventComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): EventComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<EventComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<EventComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<EventComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<EventComposerResults<TReturns>>
}
export type EventComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

