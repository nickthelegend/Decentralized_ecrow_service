/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AirDrop","desc":"","methods":[{"name":"createApplication","args":[{"name":"creatorAddress","type":"address"},{"name":"tokenName","type":"string"},{"name":"assetID","type":"uint64"},{"name":"numClaims","type":"uint64"},{"name":"maxClaims","type":"uint64"},{"name":"expiryDate","type":"uint64"},{"name":"amountToSend","type":"uint64"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"optinAsset","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}},{"name":"claimDrop","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{},"state":{"schema":{"global":{"bytes":2,"ints":6},"local":{"bytes":0,"ints":0}},"keys":{"global":{"assetID":{"key":"YXNzZXRJRA==","keyType":"AVMBytes","valueType":"uint64"},"creatorAddress":{"key":"Y3JlYXRvckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"tokenName":{"key":"dG9rZW5OYW1l","keyType":"AVMBytes","valueType":"string"},"amountRemaining":{"key":"YW1vdW50UmVtYWluaW5n","keyType":"AVMBytes","valueType":"uint64"},"numClaims":{"key":"bnVtQ2xhaW1z","keyType":"AVMBytes","valueType":"uint64"},"maxClaims":{"key":"bWF4Q2xhaW1z","keyType":"AVMBytes","valueType":"uint64"},"expiryDate":{"key":"ZXhwaXJ5RGF0ZQ==","keyType":"AVMBytes","valueType":"uint64"},"amountToSend":{"key":"YW1vdW50VG9TZW5k","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"claimedMap":{"keyType":"address","valueType":"byte[32]"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\Airdrop.algo.ts:8","pc":[0]},{"teal":2,"source":"contracts\\Airdrop.algo.ts:8","pc":[1,2,3,4,5]},{"teal":3,"source":"contracts\\Airdrop.algo.ts:8","pc":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50]},{"teal":15,"source":"contracts\\Airdrop.algo.ts:8","pc":[51,52]},{"teal":16,"source":"contracts\\Airdrop.algo.ts:8","pc":[53]},{"teal":17,"source":"contracts\\Airdrop.algo.ts:8","pc":[54,55]},{"teal":18,"source":"contracts\\Airdrop.algo.ts:8","pc":[56]},{"teal":19,"source":"contracts\\Airdrop.algo.ts:8","pc":[57,58]},{"teal":20,"source":"contracts\\Airdrop.algo.ts:8","pc":[59]},{"teal":21,"source":"contracts\\Airdrop.algo.ts:8","pc":[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85]},{"teal":25,"source":"contracts\\Airdrop.algo.ts:8","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[86]},{"teal":30,"source":"contracts\\Airdrop.algo.ts:23","pc":[87,88,89]},{"teal":31,"source":"contracts\\Airdrop.algo.ts:23","pc":[90]},{"teal":34,"source":"contracts\\Airdrop.algo.ts:23","pc":[91,92,93]},{"teal":35,"source":"contracts\\Airdrop.algo.ts:23","pc":[94]},{"teal":38,"source":"contracts\\Airdrop.algo.ts:23","pc":[95,96,97]},{"teal":39,"source":"contracts\\Airdrop.algo.ts:23","pc":[98]},{"teal":42,"source":"contracts\\Airdrop.algo.ts:23","pc":[99,100,101]},{"teal":43,"source":"contracts\\Airdrop.algo.ts:23","pc":[102]},{"teal":46,"source":"contracts\\Airdrop.algo.ts:23","pc":[103,104,105]},{"teal":47,"source":"contracts\\Airdrop.algo.ts:23","pc":[106]},{"teal":50,"source":"contracts\\Airdrop.algo.ts:23","pc":[107,108,109]},{"teal":51,"source":"contracts\\Airdrop.algo.ts:23","pc":[110,111,112]},{"teal":54,"source":"contracts\\Airdrop.algo.ts:23","pc":[113,114,115]},{"teal":55,"source":"contracts\\Airdrop.algo.ts:23","pc":[116]},{"teal":56,"source":"contracts\\Airdrop.algo.ts:23","pc":[117]},{"teal":57,"source":"contracts\\Airdrop.algo.ts:23","pc":[118,119]},{"teal":58,"source":"contracts\\Airdrop.algo.ts:23","pc":[120]},{"teal":61,"source":"contracts\\Airdrop.algo.ts:23","errorMessage":"argument 6 (creatorAddress) for createApplication must be a address","pc":[121]},{"teal":64,"source":"contracts\\Airdrop.algo.ts:23","pc":[122,123,124]},{"teal":65,"source":"contracts\\Airdrop.algo.ts:23","pc":[125]},{"teal":66,"source":"contracts\\Airdrop.algo.ts:23","pc":[126]},{"teal":70,"source":"contracts\\Airdrop.algo.ts:23","pc":[127,128,129]},{"teal":74,"source":"contracts\\Airdrop.algo.ts:28","pc":[130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145]},{"teal":75,"source":"contracts\\Airdrop.algo.ts:28","pc":[146,147]},{"teal":76,"source":"contracts\\Airdrop.algo.ts:28","pc":[148]},{"teal":80,"source":"contracts\\Airdrop.algo.ts:29","pc":[149,150,151,152,153,154,155,156,157,158,159]},{"teal":81,"source":"contracts\\Airdrop.algo.ts:29","pc":[160,161]},{"teal":82,"source":"contracts\\Airdrop.algo.ts:29","pc":[162]},{"teal":83,"source":"contracts\\Airdrop.algo.ts:29","pc":[163]},{"teal":84,"source":"contracts\\Airdrop.algo.ts:29","pc":[164]},{"teal":85,"source":"contracts\\Airdrop.algo.ts:29","pc":[165,166,167]},{"teal":86,"source":"contracts\\Airdrop.algo.ts:29","pc":[168]},{"teal":87,"source":"contracts\\Airdrop.algo.ts:29","pc":[169]},{"teal":88,"source":"contracts\\Airdrop.algo.ts:29","pc":[170]},{"teal":92,"source":"contracts\\Airdrop.algo.ts:30","pc":[171]},{"teal":93,"source":"contracts\\Airdrop.algo.ts:30","pc":[172,173]},{"teal":94,"source":"contracts\\Airdrop.algo.ts:30","pc":[174]},{"teal":98,"source":"contracts\\Airdrop.algo.ts:32","pc":[175]},{"teal":99,"source":"contracts\\Airdrop.algo.ts:32","pc":[176,177]},{"teal":100,"source":"contracts\\Airdrop.algo.ts:32","pc":[178]},{"teal":104,"source":"contracts\\Airdrop.algo.ts:34","pc":[179,180,181,182,183,184,185,186,187,188,189]},{"teal":105,"source":"contracts\\Airdrop.algo.ts:34","pc":[190,191]},{"teal":106,"source":"contracts\\Airdrop.algo.ts:34","pc":[192]},{"teal":110,"source":"contracts\\Airdrop.algo.ts:35","pc":[193]},{"teal":111,"source":"contracts\\Airdrop.algo.ts:35","pc":[194,195]},{"teal":112,"source":"contracts\\Airdrop.algo.ts:35","pc":[196]},{"teal":116,"source":"contracts\\Airdrop.algo.ts:37","pc":[197]},{"teal":117,"source":"contracts\\Airdrop.algo.ts:37","pc":[198,199]},{"teal":118,"source":"contracts\\Airdrop.algo.ts:37","pc":[200]},{"teal":119,"source":"contracts\\Airdrop.algo.ts:23","pc":[201]},{"teal":124,"source":"contracts\\Airdrop.algo.ts:42","pc":[202,203,204]},{"teal":125,"source":"contracts\\Airdrop.algo.ts:42","pc":[205]},{"teal":126,"source":"contracts\\Airdrop.algo.ts:42","pc":[206]},{"teal":130,"source":"contracts\\Airdrop.algo.ts:42","pc":[207,208,209]},{"teal":134,"source":"contracts\\Airdrop.algo.ts:44","pc":[210,211]},{"teal":135,"source":"contracts\\Airdrop.algo.ts:44","pc":[212,213,214]},{"teal":136,"source":"contracts\\Airdrop.algo.ts:44","pc":[215,216]},{"teal":137,"source":"contracts\\Airdrop.algo.ts:44","pc":[217]},{"teal":138,"source":"contracts\\Airdrop.algo.ts:44","pc":[218]},{"teal":139,"source":"contracts\\Airdrop.algo.ts:44","pc":[219]},{"teal":148,"source":"contracts\\Airdrop.algo.ts:45","pc":[220]},{"teal":149,"source":"contracts\\Airdrop.algo.ts:45","pc":[221]},{"teal":150,"source":"contracts\\Airdrop.algo.ts:45","pc":[222,223]},{"teal":154,"source":"contracts\\Airdrop.algo.ts:46","pc":[224]},{"teal":155,"source":"contracts\\Airdrop.algo.ts:46","pc":[225]},{"teal":156,"source":"contracts\\Airdrop.algo.ts:46","pc":[226,227]},{"teal":160,"source":"contracts\\Airdrop.algo.ts:47","pc":[228,229]},{"teal":161,"source":"contracts\\Airdrop.algo.ts:47","pc":[230,231]},{"teal":165,"source":"contracts\\Airdrop.algo.ts:48","pc":[232]},{"teal":166,"source":"contracts\\Airdrop.algo.ts:48","pc":[233,234]},{"teal":170,"source":"contracts\\Airdrop.algo.ts:49","pc":[235,236,237]},{"teal":171,"source":"contracts\\Airdrop.algo.ts:49","pc":[238,239]},{"teal":174,"source":"contracts\\Airdrop.algo.ts:45","pc":[240]},{"teal":175,"source":"contracts\\Airdrop.algo.ts:42","pc":[241]},{"teal":180,"source":"contracts\\Airdrop.algo.ts:70","pc":[242,243,244]},{"teal":181,"source":"contracts\\Airdrop.algo.ts:70","pc":[245]},{"teal":182,"source":"contracts\\Airdrop.algo.ts:70","pc":[246]},{"teal":186,"source":"contracts\\Airdrop.algo.ts:70","pc":[247,248,249]},{"teal":190,"source":"contracts\\Airdrop.algo.ts:71","pc":[250,251]},{"teal":191,"source":"contracts\\Airdrop.algo.ts:71","pc":[252,253,254]},{"teal":192,"source":"contracts\\Airdrop.algo.ts:71","pc":[255,256]},{"teal":193,"source":"contracts\\Airdrop.algo.ts:71","pc":[257]},{"teal":194,"source":"contracts\\Airdrop.algo.ts:71","pc":[258]},{"teal":197,"source":"contracts\\Airdrop.algo.ts:71","errorMessage":"drop creator cannot claim","pc":[259]},{"teal":201,"source":"contracts\\Airdrop.algo.ts:72","pc":[260,261]},{"teal":202,"source":"contracts\\Airdrop.algo.ts:72","pc":[262]},{"teal":203,"source":"contracts\\Airdrop.algo.ts:72","pc":[263]},{"teal":204,"source":"contracts\\Airdrop.algo.ts:72","pc":[264,265]},{"teal":205,"source":"contracts\\Airdrop.algo.ts:72","pc":[266]},{"teal":206,"source":"contracts\\Airdrop.algo.ts:72","pc":[267]},{"teal":209,"source":"contracts\\Airdrop.algo.ts:72","errorMessage":"claimant must already be opted-in to token!","pc":[268]},{"teal":213,"source":"contracts\\Airdrop.algo.ts:73","pc":[269]},{"teal":214,"source":"contracts\\Airdrop.algo.ts:73","pc":[270]},{"teal":215,"source":"contracts\\Airdrop.algo.ts:73","pc":[271,272]},{"teal":216,"source":"contracts\\Airdrop.algo.ts:73","pc":[273]},{"teal":219,"source":"contracts\\Airdrop.algo.ts:73","errorMessage":"DROP expired","pc":[274]},{"teal":223,"source":"contracts\\Airdrop.algo.ts:74","pc":[275,276]},{"teal":224,"source":"contracts\\Airdrop.algo.ts:74","pc":[277]},{"teal":225,"source":"contracts\\Airdrop.algo.ts:74","pc":[278]},{"teal":226,"source":"contracts\\Airdrop.algo.ts:74","pc":[279]},{"teal":227,"source":"contracts\\Airdrop.algo.ts:74","pc":[280]},{"teal":230,"source":"contracts\\Airdrop.algo.ts:74","errorMessage":"already claimed","pc":[281]},{"teal":234,"source":"contracts\\Airdrop.algo.ts:76","pc":[282,283]},{"teal":235,"source":"contracts\\Airdrop.algo.ts:76","pc":[284,285]},{"teal":236,"source":"contracts\\Airdrop.algo.ts:76","pc":[286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319]},{"teal":237,"source":"contracts\\Airdrop.algo.ts:76","pc":[320]},{"teal":238,"source":"contracts\\Airdrop.algo.ts:76","pc":[321]},{"teal":239,"source":"contracts\\Airdrop.algo.ts:76","pc":[322,323,324]},{"teal":240,"source":"contracts\\Airdrop.algo.ts:76","pc":[325,326]},{"teal":241,"source":"contracts\\Airdrop.algo.ts:76","pc":[327]},{"teal":242,"source":"contracts\\Airdrop.algo.ts:76","pc":[328]},{"teal":243,"source":"contracts\\Airdrop.algo.ts:76","pc":[329,330,331]},{"teal":244,"source":"contracts\\Airdrop.algo.ts:76","pc":[332]},{"teal":248,"source":"contracts\\Airdrop.algo.ts:78","pc":[333]},{"teal":249,"source":"contracts\\Airdrop.algo.ts:78","pc":[334]},{"teal":250,"source":"contracts\\Airdrop.algo.ts:78","pc":[335]},{"teal":251,"source":"contracts\\Airdrop.algo.ts:78","pc":[336]},{"teal":252,"source":"contracts\\Airdrop.algo.ts:78","pc":[337]},{"teal":253,"source":"contracts\\Airdrop.algo.ts:78","pc":[338]},{"teal":254,"source":"contracts\\Airdrop.algo.ts:78","pc":[339]},{"teal":258,"source":"contracts\\Airdrop.algo.ts:80","pc":[340,341]},{"teal":259,"source":"contracts\\Airdrop.algo.ts:80","pc":[342]},{"teal":260,"source":"contracts\\Airdrop.algo.ts:80","pc":[343]},{"teal":261,"source":"contracts\\Airdrop.algo.ts:80","pc":[344,345,346]},{"teal":262,"source":"contracts\\Airdrop.algo.ts:70","pc":[347]},{"teal":274,"source":"contracts\\Airdrop.algo.ts:93","pc":[348,349,350]},{"teal":277,"source":"contracts\\Airdrop.algo.ts:93","pc":[351,352]},{"teal":285,"source":"contracts\\Airdrop.algo.ts:94","pc":[353]},{"teal":286,"source":"contracts\\Airdrop.algo.ts:94","pc":[354]},{"teal":287,"source":"contracts\\Airdrop.algo.ts:94","pc":[355,356]},{"teal":291,"source":"contracts\\Airdrop.algo.ts:95","pc":[357]},{"teal":292,"source":"contracts\\Airdrop.algo.ts:95","pc":[358]},{"teal":293,"source":"contracts\\Airdrop.algo.ts:95","pc":[359,360]},{"teal":297,"source":"contracts\\Airdrop.algo.ts:96","pc":[361,362]},{"teal":298,"source":"contracts\\Airdrop.algo.ts:96","pc":[363,364]},{"teal":302,"source":"contracts\\Airdrop.algo.ts:97","pc":[365,366]},{"teal":303,"source":"contracts\\Airdrop.algo.ts:97","pc":[367,368]},{"teal":306,"source":"contracts\\Airdrop.algo.ts:94","pc":[369]},{"teal":307,"source":"contracts\\Airdrop.algo.ts:94","pc":[370,371]},{"teal":310,"source":"contracts\\Airdrop.algo.ts:94","pc":[372]},{"teal":314,"source":"contracts\\Airdrop.algo.ts:101","pc":[373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389]},{"teal":315,"source":"contracts\\Airdrop.algo.ts:101","pc":[390]},{"teal":316,"source":"contracts\\Airdrop.algo.ts:101","pc":[391,392]},{"teal":317,"source":"contracts\\Airdrop.algo.ts:101","pc":[393]},{"teal":318,"source":"contracts\\Airdrop.algo.ts:101","pc":[394,395]},{"teal":322,"source":"contracts\\Airdrop.algo.ts:103","pc":[396,397]},{"teal":325,"source":"contracts\\Airdrop.algo.ts:93","pc":[398,399]},{"teal":326,"source":"contracts\\Airdrop.algo.ts:93","pc":[400]},{"teal":329,"source":"contracts\\Airdrop.algo.ts:8","pc":[401,402,403,404,405,406]},{"teal":330,"source":"contracts\\Airdrop.algo.ts:8","pc":[407,408,409]},{"teal":331,"source":"contracts\\Airdrop.algo.ts:8","pc":[410,411,412,413]},{"teal":334,"source":"contracts\\Airdrop.algo.ts:8","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[414]},{"teal":337,"source":"contracts\\Airdrop.algo.ts:8","pc":[415,416,417,418,419,420]},{"teal":338,"source":"contracts\\Airdrop.algo.ts:8","pc":[421,422,423,424,425,426]},{"teal":339,"source":"contracts\\Airdrop.algo.ts:8","pc":[427,428,429]},{"teal":340,"source":"contracts\\Airdrop.algo.ts:8","pc":[430,431,432,433,434,435]},{"teal":343,"source":"contracts\\Airdrop.algo.ts:8","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[436]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiADAQAEJgUHYXNzZXRJRAludW1DbGFpbXMMYW1vdW50VG9TZW5kCmV4cGlyeURhdGUAMRgUgQYLMRkIjQwBSQAAAAAAAAAAAAABOwAAAAAAAAAAAAAANhoHFzYaBhc2GgUXNhoEFzYaAxc2GgJXAgA2GgFJFYEgEkSIAAIiQ4oHAIAOY3JlYXRvckFkZHJlc3OL/2eACXRva2VuTmFtZYv+SRUWVwYCTFBnKIv9ZymL/GeACW1heENsYWltc4v7ZyuL+mcqi/lniYgAAiJDigAAMQA2MgByB0gSRLEkshAoZLIRMgqyFCOyEoHQD7IBs4mIAAIiQ4oAADEANjIAcgdIE0QxAChkcABMSEQrZDIHD0QxAL1MSBREMQAxF4AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQSVcgACcEqERXACC/KWQiCClMZzEAKmSIAAGJigIBJwSxJLIQKGSyEYv+shSL/7ISI7IBs4APYW1vdW50UmVtYWluaW5nZIv/CYwAiwCMAImABF5mrek2GgCOAf65AIAEPom8+IAEmutezjYaAI4C/xb/PgA=","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AirDrop contract
 */
export type AirDropArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void': {
      creatorAddress: string
      tokenName: string
      assetId: bigint | number
      numClaims: bigint | number
      maxClaims: bigint | number
      expiryDate: bigint | number
      amountToSend: bigint | number
    }
    'optinAsset()void': Record<string, never>
    'claimDrop()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void': [creatorAddress: string, tokenName: string, assetId: bigint | number, numClaims: bigint | number, maxClaims: bigint | number, expiryDate: bigint | number, amountToSend: bigint | number]
    'optinAsset()void': []
    'claimDrop()void': []
  }
}

/**
 * The return type for each method
 */
export type AirDropReturns = {
  'createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void': void
  'optinAsset()void': void
  'claimDrop()void': void
}

/**
 * Defines the types of available calls and state of the AirDrop smart contract.
 */
export type AirDropTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void' | 'createApplication', {
      argsObj: AirDropArgs['obj']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void']
      argsTuple: AirDropArgs['tuple']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void']
      returns: AirDropReturns['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void']
    }>
    & Record<'optinAsset()void' | 'optinAsset', {
      argsObj: AirDropArgs['obj']['optinAsset()void']
      argsTuple: AirDropArgs['tuple']['optinAsset()void']
      returns: AirDropReturns['optinAsset()void']
    }>
    & Record<'claimDrop()void' | 'claimDrop', {
      argsObj: AirDropArgs['obj']['claimDrop()void']
      argsTuple: AirDropArgs['tuple']['claimDrop()void']
      returns: AirDropReturns['claimDrop()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetId: bigint
        creatorAddress: string
        tokenName: string
        amountRemaining: bigint
        numClaims: bigint
        maxClaims: bigint
        expiryDate: bigint
        amountToSend: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        claimedMap: Map<string, Uint8Array>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AirDropSignatures = keyof AirDropTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AirDropNonVoidMethodSignatures = keyof AirDropTypes['methods'] extends infer T ? T extends keyof AirDropTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AirDrop smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AirDropSignatures> = AirDropTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AirDrop smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AirDropSignatures> = AirDropTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AirDropTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AirDropTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AirDropCreateCallParams =
  | Expand<CallParams<AirDropArgs['obj']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void'] | AirDropArgs['tuple']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AirDropArgs['obj']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void'] | AirDropArgs['tuple']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void']> & {method: 'createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AirDropDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AirDropCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AirDrop smart contract
 */
export abstract class AirDropParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AirDropCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void':
            return AirDropParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AirDrop smart contract using the createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AirDropArgs['obj']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void'] | AirDropArgs['tuple']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.creatorAddress, params.args.tokenName, params.args.assetId, params.args.numClaims, params.args.maxClaims, params.args.expiryDate, params.args.amountToSend],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the optinAsset()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optinAsset(params: CallParams<AirDropArgs['obj']['optinAsset()void'] | AirDropArgs['tuple']['optinAsset()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optinAsset()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the claimDrop()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimDrop(params: CallParams<AirDropArgs['obj']['claimDrop()void'] | AirDropArgs['tuple']['claimDrop()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimDrop()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AirDrop smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AirDropFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AirDropFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AirDropClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AirDropClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AirDrop smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AirDropDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AirDropParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AirDropCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AirDropClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AirDrop smart contract using the createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AirDropArgs['obj']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void'] | AirDropArgs['tuple']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AirDropParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AirDrop smart contract using the createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AirDropArgs['obj']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void'] | AirDropArgs['tuple']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AirDropParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AirDrop smart contract using an ABI method call using the createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AirDropArgs['obj']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void'] | AirDropArgs['tuple']['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AirDropParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AirDropReturns['createApplication(address,string,uint64,uint64,uint64,uint64,uint64)void']) }, appClient: new AirDropClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AirDrop smart contract
 */
export class AirDropClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AirDropClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AirDrop app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AirDropClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AirDropNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AirDropClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AirDropClient> {
    return new AirDropClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AirDropClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AirDropClient> {
    return new AirDropClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AirDrop smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AirDrop smart contract using the `optinAsset()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optinAsset: (params: CallParams<AirDropArgs['obj']['optinAsset()void'] | AirDropArgs['tuple']['optinAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AirDropParamsFactory.optinAsset(params))
    },

    /**
     * Makes a call to the AirDrop smart contract using the `claimDrop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimDrop: (params: CallParams<AirDropArgs['obj']['claimDrop()void'] | AirDropArgs['tuple']['claimDrop()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AirDropParamsFactory.claimDrop(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AirDrop smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AirDrop smart contract using the `optinAsset()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optinAsset: (params: CallParams<AirDropArgs['obj']['optinAsset()void'] | AirDropArgs['tuple']['optinAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AirDropParamsFactory.optinAsset(params))
    },

    /**
     * Makes a call to the AirDrop smart contract using the `claimDrop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimDrop: (params: CallParams<AirDropArgs['obj']['claimDrop()void'] | AirDropArgs['tuple']['claimDrop()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AirDropParamsFactory.claimDrop(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AirDrop smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AirDrop smart contract using the `optinAsset()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optinAsset: async (params: CallParams<AirDropArgs['obj']['optinAsset()void'] | AirDropArgs['tuple']['optinAsset()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AirDropParamsFactory.optinAsset(params))
      return {...result, return: result.return as unknown as (undefined | AirDropReturns['optinAsset()void'])}
    },

    /**
     * Makes a call to the AirDrop smart contract using the `claimDrop()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimDrop: async (params: CallParams<AirDropArgs['obj']['claimDrop()void'] | AirDropArgs['tuple']['claimDrop()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AirDropParamsFactory.claimDrop(params))
      return {...result, return: result.return as unknown as (undefined | AirDropReturns['claimDrop()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AirDropClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AirDrop app
   */
  state = {
    /**
     * Methods to access global state for the current AirDrop app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetId: result.assetID,
          creatorAddress: result.creatorAddress,
          tokenName: result.tokenName,
          amountRemaining: result.amountRemaining,
          numClaims: result.numClaims,
          maxClaims: result.maxClaims,
          expiryDate: result.expiryDate,
          amountToSend: result.amountToSend,
        }
      },
      /**
       * Get the current value of the assetID key in global state
       */
      assetId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetID")) as bigint | undefined },
      /**
       * Get the current value of the creatorAddress key in global state
       */
      creatorAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("creatorAddress")) as string | undefined },
      /**
       * Get the current value of the tokenName key in global state
       */
      tokenName: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("tokenName")) as string | undefined },
      /**
       * Get the current value of the amountRemaining key in global state
       */
      amountRemaining: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("amountRemaining")) as bigint | undefined },
      /**
       * Get the current value of the numClaims key in global state
       */
      numClaims: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("numClaims")) as bigint | undefined },
      /**
       * Get the current value of the maxClaims key in global state
       */
      maxClaims: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("maxClaims")) as bigint | undefined },
      /**
       * Get the current value of the expiryDate key in global state
       */
      expiryDate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("expiryDate")) as bigint | undefined },
      /**
       * Get the current value of the amountToSend key in global state
       */
      amountToSend: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("amountToSend")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current AirDrop app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the claimedMap map in box state
       */
      claimedMap: {
        /**
         * Get all current values of the claimedMap map in box state
         */
        getMap: async (): Promise<Map<string, Uint8Array>> => { return (await this.appClient.state.box.getMap("claimedMap")) as Map<string, Uint8Array> },
        /**
         * Get a current value of the claimedMap map by key from box state
         */
        value: async (key: string): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("claimedMap", key) as Uint8Array | undefined },
      },
    },
  }

  public newGroup(): AirDropComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a optinAsset()void method call against the AirDrop contract
       */
      optinAsset(params: CallParams<AirDropArgs['obj']['optinAsset()void'] | AirDropArgs['tuple']['optinAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optinAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a claimDrop()void method call against the AirDrop contract
       */
      claimDrop(params: CallParams<AirDropArgs['obj']['claimDrop()void'] | AirDropArgs['tuple']['claimDrop()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimDrop(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AirDrop contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AirDropComposer
  }
}
export type AirDropComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the optinAsset()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optinAsset(params?: CallParams<AirDropArgs['obj']['optinAsset()void'] | AirDropArgs['tuple']['optinAsset()void']>): AirDropComposer<[...TReturns, AirDropReturns['optinAsset()void'] | undefined]>

  /**
   * Calls the claimDrop()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimDrop(params?: CallParams<AirDropArgs['obj']['claimDrop()void'] | AirDropArgs['tuple']['claimDrop()void']>): AirDropComposer<[...TReturns, AirDropReturns['claimDrop()void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AirDrop smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AirDropComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AirDropComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AirDropComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AirDropComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AirDropComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AirDropComposerResults<TReturns>>
}
export type AirDropComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

