/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AirdopManager","desc":"","methods":[{"name":"createApplication","args":[{"name":"maintainerAddress","type":"address"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]}},{"name":"createDrop","args":[{"name":"dropConfig","type":"(uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"DropConfig"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]}}],"arcs":[4,56],"structs":{"DropConfig":[{"name":"assetId","type":"uint64"},{"name":"creatorAddress","type":"address"},{"name":"tokenName","type":"string"},{"name":"amountRemaining","type":"uint64"},{"name":"numClaims","type":"uint64"},{"name":"maxClaims","type":"uint64"},{"name":"expiryDate","type":"uint64"},{"name":"amountToSend","type":"uint64"},{"name":"dropAppId","type":"uint64"}]},"state":{"schema":{"global":{"bytes":1,"ints":2},"local":{"bytes":0,"ints":0}},"keys":{"global":{"maintainerAddress":{"key":"bWFpbnRhaW5lckFkZHJlc3M=","keyType":"AVMBytes","valueType":"address"},"totalDrops":{"key":"dG90YWxEcm9wcw==","keyType":"AVMBytes","valueType":"uint64"},"lastDropID":{"key":"bGFzdERyb3BJRA==","keyType":"AVMBytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"allDrops":{"keyType":"uint64","valueType":"DropConfig"}}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"teal":1,"source":"contracts\\AirdropManager.algo.ts:20","pc":[0]},{"teal":2,"source":"contracts\\AirdropManager.algo.ts:20","pc":[1,2,3,4]},{"teal":3,"source":"contracts\\AirdropManager.algo.ts:20","pc":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]},{"teal":15,"source":"contracts\\AirdropManager.algo.ts:20","pc":[29,30]},{"teal":16,"source":"contracts\\AirdropManager.algo.ts:20","pc":[31]},{"teal":17,"source":"contracts\\AirdropManager.algo.ts:20","pc":[32,33]},{"teal":18,"source":"contracts\\AirdropManager.algo.ts:20","pc":[34]},{"teal":19,"source":"contracts\\AirdropManager.algo.ts:20","pc":[35,36]},{"teal":20,"source":"contracts\\AirdropManager.algo.ts:20","pc":[37]},{"teal":21,"source":"contracts\\AirdropManager.algo.ts:20","pc":[38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63]},{"teal":25,"source":"contracts\\AirdropManager.algo.ts:20","errorMessage":"The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?","pc":[64]},{"teal":30,"source":"contracts\\AirdropManager.algo.ts:31","pc":[65,66,67]},{"teal":31,"source":"contracts\\AirdropManager.algo.ts:31","pc":[68]},{"teal":32,"source":"contracts\\AirdropManager.algo.ts:31","pc":[69]},{"teal":33,"source":"contracts\\AirdropManager.algo.ts:31","pc":[70,71]},{"teal":34,"source":"contracts\\AirdropManager.algo.ts:31","pc":[72]},{"teal":37,"source":"contracts\\AirdropManager.algo.ts:31","errorMessage":"argument 0 (maintainerAddress) for createApplication must be a address","pc":[73]},{"teal":40,"source":"contracts\\AirdropManager.algo.ts:31","pc":[74,75,76]},{"teal":41,"source":"contracts\\AirdropManager.algo.ts:31","pc":[77]},{"teal":42,"source":"contracts\\AirdropManager.algo.ts:31","pc":[78]},{"teal":46,"source":"contracts\\AirdropManager.algo.ts:31","pc":[79,80,81]},{"teal":50,"source":"contracts\\AirdropManager.algo.ts:32","pc":[82]},{"teal":51,"source":"contracts\\AirdropManager.algo.ts:32","pc":[83]},{"teal":52,"source":"contracts\\AirdropManager.algo.ts:32","pc":[84]},{"teal":56,"source":"contracts\\AirdropManager.algo.ts:33","pc":[85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103]},{"teal":57,"source":"contracts\\AirdropManager.algo.ts:33","pc":[104,105]},{"teal":58,"source":"contracts\\AirdropManager.algo.ts:33","pc":[106]},{"teal":62,"source":"contracts\\AirdropManager.algo.ts:34","pc":[107]},{"teal":63,"source":"contracts\\AirdropManager.algo.ts:34","pc":[108]},{"teal":64,"source":"contracts\\AirdropManager.algo.ts:34","pc":[109]},{"teal":65,"source":"contracts\\AirdropManager.algo.ts:31","pc":[110]},{"teal":70,"source":"contracts\\AirdropManager.algo.ts:37","pc":[111,112,113]},{"teal":73,"source":"contracts\\AirdropManager.algo.ts:37","pc":[114,115,116]},{"teal":74,"source":"contracts\\AirdropManager.algo.ts:37","pc":[117]},{"teal":75,"source":"contracts\\AirdropManager.algo.ts:37","pc":[118]},{"teal":79,"source":"contracts\\AirdropManager.algo.ts:37","pc":[119,120,121]},{"teal":83,"source":"contracts\\AirdropManager.algo.ts:39","pc":[122]},{"teal":84,"source":"contracts\\AirdropManager.algo.ts:39","pc":[123]},{"teal":85,"source":"contracts\\AirdropManager.algo.ts:39","pc":[124]},{"teal":86,"source":"contracts\\AirdropManager.algo.ts:39","pc":[125]},{"teal":87,"source":"contracts\\AirdropManager.algo.ts:39","pc":[126]},{"teal":88,"source":"contracts\\AirdropManager.algo.ts:39","pc":[127]},{"teal":89,"source":"contracts\\AirdropManager.algo.ts:39","pc":[128]},{"teal":93,"source":"contracts\\AirdropManager.algo.ts:40","pc":[129]},{"teal":94,"source":"contracts\\AirdropManager.algo.ts:40","pc":[130]},{"teal":95,"source":"contracts\\AirdropManager.algo.ts:40","pc":[131]},{"teal":96,"source":"contracts\\AirdropManager.algo.ts:40","pc":[132]},{"teal":97,"source":"contracts\\AirdropManager.algo.ts:40","pc":[133]},{"teal":98,"source":"contracts\\AirdropManager.algo.ts:40","pc":[134]},{"teal":99,"source":"contracts\\AirdropManager.algo.ts:40","pc":[135]},{"teal":103,"source":"contracts\\AirdropManager.algo.ts:41","pc":[136]},{"teal":104,"source":"contracts\\AirdropManager.algo.ts:41","pc":[137]},{"teal":105,"source":"contracts\\AirdropManager.algo.ts:41","pc":[138]},{"teal":106,"source":"contracts\\AirdropManager.algo.ts:41","pc":[139]},{"teal":107,"source":"contracts\\AirdropManager.algo.ts:41","pc":[140]},{"teal":108,"source":"contracts\\AirdropManager.algo.ts:41","pc":[141]},{"teal":109,"source":"contracts\\AirdropManager.algo.ts:41","pc":[142,143]},{"teal":110,"source":"contracts\\AirdropManager.algo.ts:41","pc":[144]},{"teal":111,"source":"contracts\\AirdropManager.algo.ts:37","pc":[145]},{"teal":114,"source":"contracts\\AirdropManager.algo.ts:20","pc":[146,147,148,149,150,151]},{"teal":115,"source":"contracts\\AirdropManager.algo.ts:20","pc":[152,153,154]},{"teal":116,"source":"contracts\\AirdropManager.algo.ts:20","pc":[155,156,157,158]},{"teal":119,"source":"contracts\\AirdropManager.algo.ts:20","errorMessage":"this contract does not implement the given ABI method for create NoOp","pc":[159]},{"teal":122,"source":"contracts\\AirdropManager.algo.ts:20","pc":[160,161,162,163,164,165]},{"teal":123,"source":"contracts\\AirdropManager.algo.ts:20","pc":[166,167,168]},{"teal":124,"source":"contracts\\AirdropManager.algo.ts:20","pc":[169,170,171,172]},{"teal":127,"source":"contracts\\AirdropManager.algo.ts:20","errorMessage":"this contract does not implement the given ABI method for call NoOp","pc":[173]}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAKYnl0ZWNibG9jayAweDZjNjE3Mzc0NDQ3MjZmNzA0OTQ0IDB4NzQ2Zjc0NjE2YzQ0NzI2ZjcwNzMKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA2LjMKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIG1haW50YWluZXJBZGRyZXNzOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJcHVzaGludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChtYWludGFpbmVyQWRkcmVzcykgZm9yIGNyZWF0ZUFwcGxpY2F0aW9uIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gY3JlYXRlQXBwbGljYXRpb24obWFpbnRhaW5lckFkZHJlc3M6IEFkZHJlc3MpOiB2b2lkCmNyZWF0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMSAwCgoJLy8gY29udHJhY3RzXEFpcmRyb3BNYW5hZ2VyLmFsZ28udHM6MzIKCS8vIHRoaXMudG90YWxEcm9wcy52YWx1ZSA9IDAKCWJ5dGVjIDEgLy8gICJ0b3RhbERyb3BzIgoJaW50YyAxIC8vIDAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXEFpcmRyb3BNYW5hZ2VyLmFsZ28udHM6MzMKCS8vIHRoaXMubWFpbnRhaW5lckFkZHJlc3MudmFsdWUgPSBtYWludGFpbmVyQWRkcmVzcwoJcHVzaGJ5dGVzIDB4NmQ2MTY5NmU3NDYxNjk2ZTY1NzI0MTY0NjQ3MjY1NzM3MyAvLyAibWFpbnRhaW5lckFkZHJlc3MiCglmcmFtZV9kaWcgLTEgLy8gbWFpbnRhaW5lckFkZHJlc3M6IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gY29udHJhY3RzXEFpcmRyb3BNYW5hZ2VyLmFsZ28udHM6MzQKCS8vIHRoaXMubGFzdERyb3BJRC52YWx1ZSA9IDAKCWJ5dGVjIDAgLy8gICJsYXN0RHJvcElEIgoJaW50YyAxIC8vIDAKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGNyZWF0ZURyb3AoKHVpbnQ2NCxhZGRyZXNzLHN0cmluZyx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkpdm9pZAoqYWJpX3JvdXRlX2NyZWF0ZURyb3A6CgkvLyBkcm9wQ29uZmlnOiAodWludDY0LGFkZHJlc3Msc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoKCS8vIGV4ZWN1dGUgY3JlYXRlRHJvcCgodWludDY0LGFkZHJlc3Msc3RyaW5nLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0KSl2b2lkCgljYWxsc3ViIGNyZWF0ZURyb3AKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZURyb3AoZHJvcENvbmZpZzogRHJvcENvbmZpZyk6IHZvaWQKY3JlYXRlRHJvcDoKCXByb3RvIDEgMAoKCS8vIGNvbnRyYWN0c1xBaXJkcm9wTWFuYWdlci5hbGdvLnRzOjM5CgkvLyB0aGlzLmxhc3REcm9wSUQudmFsdWUgKz0gMQoJYnl0ZWMgMCAvLyAgImxhc3REcm9wSUQiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDEKCSsKCWJ5dGVjIDAgLy8gICJsYXN0RHJvcElEIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQWlyZHJvcE1hbmFnZXIuYWxnby50czo0MAoJLy8gdGhpcy50b3RhbERyb3BzLnZhbHVlICs9MQoJYnl0ZWMgMSAvLyAgInRvdGFsRHJvcHMiCglhcHBfZ2xvYmFsX2dldAoJaW50YyAwIC8vIDEKCSsKCWJ5dGVjIDEgLy8gICJ0b3RhbERyb3BzIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBjb250cmFjdHNcQWlyZHJvcE1hbmFnZXIuYWxnby50czo0MQoJLy8gdGhpcy5hbGxEcm9wcyh0aGlzLmxhc3REcm9wSUQudmFsdWUpLnZhbHVlID0gZHJvcENvbmZpZwoJYnl0ZWMgMCAvLyAgImxhc3REcm9wSUQiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyAtMSAvLyBkcm9wQ29uZmlnOiBEcm9wQ29uZmlnCglib3hfcHV0CglyZXRzdWIKCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweGQzMjRiZWE0IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4Y2M5NWY1OTIgLy8gbWV0aG9kICJjcmVhdGVEcm9wKCh1aW50NjQsYWRkcmVzcyxzdHJpbmcsdWludDY0LHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCx1aW50NjQpKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZURyb3AKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"byteCode":{"approval":"CiACAQAmAgpsYXN0RHJvcElECnRvdGFsRHJvcHMxGBSBBgsxGQiNDABgAAAAAAAAAAAAAABSAAAAAAAAAAAAAAA2GgFJFYEgEkSIAAIiQ4oBACkjZ4ARbWFpbnRhaW5lckFkZHJlc3OL/2coI2eJNhoBiAACIkOKAQAoZCIIKExnKWQiCClMZyhkFkm8SIv/v4mABNMkvqQ2GgCOAf+iAIAEzJX1kjYaAI4B/8IA","clear":"Cg=="},"compilerInfo":{"compiler":"algod","compilerVersion":{"major":3,"minor":27,"patch":0,"commitHash":"f54f0997"}}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type DropConfig = {
  assetId: bigint,
  creatorAddress: string,
  tokenName: string,
  amountRemaining: bigint,
  numClaims: bigint,
  maxClaims: bigint,
  expiryDate: bigint,
  amountToSend: bigint,
  dropAppId: bigint
}


/**
 * Converts the ABI tuple representation of a DropConfig to the struct representation
 */
export function DropConfigFromTuple(abiTuple: [bigint, string, string, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.DropConfig, APP_SPEC.structs) as DropConfig
}

/**
 * The argument types for the AirdopManager contract
 */
export type AirdopManagerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address)void': {
      maintainerAddress: string
    }
    'createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void': {
      dropConfig: DropConfig
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address)void': [maintainerAddress: string]
    'createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void': [dropConfig: DropConfig]
  }
}

/**
 * The return type for each method
 */
export type AirdopManagerReturns = {
  'createApplication(address)void': void
  'createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void': void
}

/**
 * Defines the types of available calls and state of the AirdopManager smart contract.
 */
export type AirdopManagerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address)void' | 'createApplication', {
      argsObj: AirdopManagerArgs['obj']['createApplication(address)void']
      argsTuple: AirdopManagerArgs['tuple']['createApplication(address)void']
      returns: AirdopManagerReturns['createApplication(address)void']
    }>
    & Record<'createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void' | 'createDrop', {
      argsObj: AirdopManagerArgs['obj']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void']
      argsTuple: AirdopManagerArgs['tuple']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void']
      returns: AirdopManagerReturns['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        maintainerAddress: string
        totalDrops: bigint
        lastDropId: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        allDrops: Map<bigint | number, DropConfig>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AirdopManagerSignatures = keyof AirdopManagerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AirdopManagerNonVoidMethodSignatures = keyof AirdopManagerTypes['methods'] extends infer T ? T extends keyof AirdopManagerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AirdopManager smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AirdopManagerSignatures> = AirdopManagerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AirdopManager smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AirdopManagerSignatures> = AirdopManagerTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AirdopManagerTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AirdopManagerTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AirdopManagerCreateCallParams =
  | Expand<CallParams<AirdopManagerArgs['obj']['createApplication(address)void'] | AirdopManagerArgs['tuple']['createApplication(address)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<AirdopManagerArgs['obj']['createApplication(address)void'] | AirdopManagerArgs['tuple']['createApplication(address)void']> & {method: 'createApplication(address)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AirdopManagerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AirdopManagerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AirdopManager smart contract
 */
export abstract class AirdopManagerParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AirdopManagerCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address)void':
            return AirdopManagerParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AirdopManager smart contract using the createApplication(address)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<AirdopManagerArgs['obj']['createApplication(address)void'] | AirdopManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.maintainerAddress],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createDrop(params: CallParams<AirdopManagerArgs['obj']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void'] | AirdopManagerArgs['tuple']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.dropConfig],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AirdopManager smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AirdopManagerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AirdopManagerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AirdopManagerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AirdopManagerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AirdopManager smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AirdopManagerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AirdopManagerParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (AirdopManagerCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new AirdopManagerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AirdopManager smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<AirdopManagerArgs['obj']['createApplication(address)void'] | AirdopManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(AirdopManagerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AirdopManager smart contract using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<AirdopManagerArgs['obj']['createApplication(address)void'] | AirdopManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(AirdopManagerParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AirdopManager smart contract using an ABI method call using the createApplication(address)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<AirdopManagerArgs['obj']['createApplication(address)void'] | AirdopManagerArgs['tuple']['createApplication(address)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(AirdopManagerParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | AirdopManagerReturns['createApplication(address)void']) }, appClient: new AirdopManagerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AirdopManager smart contract
 */
export class AirdopManagerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AirdopManagerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AirdopManager app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AirdopManagerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AirdopManagerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AirdopManagerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AirdopManagerClient> {
    return new AirdopManagerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AirdopManagerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AirdopManagerClient> {
    return new AirdopManagerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AirdopManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AirdopManager smart contract using the `createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createDrop: (params: CallParams<AirdopManagerArgs['obj']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void'] | AirdopManagerArgs['tuple']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AirdopManagerParamsFactory.createDrop(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AirdopManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AirdopManager smart contract using the `createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createDrop: (params: CallParams<AirdopManagerArgs['obj']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void'] | AirdopManagerArgs['tuple']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AirdopManagerParamsFactory.createDrop(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AirdopManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AirdopManager smart contract using the `createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createDrop: async (params: CallParams<AirdopManagerArgs['obj']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void'] | AirdopManagerArgs['tuple']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AirdopManagerParamsFactory.createDrop(params))
      return {...result, return: result.return as unknown as (undefined | AirdopManagerReturns['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AirdopManagerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AirdopManager app
   */
  state = {
    /**
     * Methods to access global state for the current AirdopManager app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          maintainerAddress: result.maintainerAddress,
          totalDrops: result.totalDrops,
          lastDropId: result.lastDropID,
        }
      },
      /**
       * Get the current value of the maintainerAddress key in global state
       */
      maintainerAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("maintainerAddress")) as string | undefined },
      /**
       * Get the current value of the totalDrops key in global state
       */
      totalDrops: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalDrops")) as bigint | undefined },
      /**
       * Get the current value of the lastDropID key in global state
       */
      lastDropId: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastDropID")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current AirdopManager app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the allDrops map in box state
       */
      allDrops: {
        /**
         * Get all current values of the allDrops map in box state
         */
        getMap: async (): Promise<Map<bigint, DropConfig>> => { return (await this.appClient.state.box.getMap("allDrops")) as Map<bigint, DropConfig> },
        /**
         * Get a current value of the allDrops map by key from box state
         */
        value: async (key: bigint | number): Promise<DropConfig | undefined> => { return await this.appClient.state.box.getMapValue("allDrops", key) as DropConfig | undefined },
      },
    },
  }

  public newGroup(): AirdopManagerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void method call against the AirdopManager contract
       */
      createDrop(params: CallParams<AirdopManagerArgs['obj']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void'] | AirdopManagerArgs['tuple']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createDrop(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AirdopManager contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AirdopManagerComposer
  }
}
export type AirdopManagerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createDrop(params?: CallParams<AirdopManagerArgs['obj']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void'] | AirdopManagerArgs['tuple']['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void']>): AirdopManagerComposer<[...TReturns, AirdopManagerReturns['createDrop((uint64,address,string,uint64,uint64,uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AirdopManager smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AirdopManagerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AirdopManagerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AirdopManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AirdopManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AirdopManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AirdopManagerComposerResults<TReturns>>
}
export type AirdopManagerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

