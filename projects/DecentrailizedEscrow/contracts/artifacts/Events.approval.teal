#pragma version 10
intcblock 1 0
bytecblock 0x6c61737444726f704964 0x65 0x 0x63

// This TEAL was generated by TEALScript v0.105.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address)void
*abi_route_createApplication:
	// maintainerAddress: address
	txna ApplicationArgs 1
	dup
	len
	pushint 32
	==

	// argument 0 (maintainerAddress) for createApplication must be a address
	assert

	// execute createApplication(address)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(maintainerAddress: Address): void
createApplication:
	proto 1 0

	// contracts/Events.algo.ts:37
	// this.maintainerAddress.value = maintainerAddress
	pushbytes 0x6d61696e7461696e657241646472657373 // "maintainerAddress"
	frame_dig -1 // maintainerAddress: Address
	app_global_put

	// contracts/Events.algo.ts:38
	// this.totalEvents.value = 0
	pushbytes 0x746f74616c4576656e7473 // "totalEvents"
	intc 1 // 0
	app_global_put

	// contracts/Events.algo.ts:39
	// this.lastEventId.value = 0
	bytec 0 //  "lastDropId"
	intc 1 // 0
	app_global_put
	retsub

// createEvent(pay,(uint64,string,address,uint64,string,uint64,uint64,uint64))uint64
*abi_route_createEvent:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// eventConfig: (uint64,string,address,uint64,string,uint64,uint64,uint64)
	txna ApplicationArgs 1

	// feeAndMbrPayment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (feeAndMbrPayment) for createEvent must be a pay transaction
	assert

	// execute createEvent(pay,(uint64,string,address,uint64,string,uint64,uint64,uint64))uint64
	callsub createEvent
	itob
	concat
	log
	intc 0 // 1
	return

// createEvent(feeAndMbrPayment: PayTxn, eventConfig: EventConfig): uint64
createEvent:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// contracts/Events.algo.ts:43
	// verifyPayTxn(feeAndMbrPayment, { receiver: this.app.address })
	// verify receiver
	frame_dig -1 // feeAndMbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"feeAndMbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// contracts/Events.algo.ts:47
	// assert(eventConfig.EndTime >= globals.latestTimestamp, "event endtime must be in future")
	frame_dig -2 // eventConfig: EventConfig
	store 255 // full array
	load 255 // full array
	extract 60 8
	btoi
	global LatestTimestamp
	>=

	// event endtime must be in future
	assert

	// contracts/Events.algo.ts:48
	// assert(eventConfig.StartTime >= globals.latestTimestamp, "event start time must be in future")
	frame_dig -2 // eventConfig: EventConfig
	store 255 // full array
	load 255 // full array
	extract 52 8
	btoi
	global LatestTimestamp
	>=

	// event start time must be in future
	assert

	// contracts/Events.algo.ts:50
	// this.lastEventId.value += 1
	bytec 0 //  "lastDropId"
	app_global_get
	intc 0 // 1
	+
	bytec 0 //  "lastDropId"
	swap
	app_global_put

	// contracts/Events.algo.ts:51
	// eventID = this.lastEventId.value
	bytec 0 //  "lastDropId"
	app_global_get
	frame_bury 0 // eventID: uint64

	// contracts/Events.algo.ts:53
	// this.allEvents(this.lastEventId.value).value = eventConfig
	bytec 1 //  "e"
	bytec 0 //  "lastDropId"
	app_global_get
	itob
	concat
	dup
	box_del
	pop
	frame_dig -2 // eventConfig: EventConfig
	box_put

	// contracts/Events.algo.ts:57
	// return eventID
	frame_dig 0 // eventID: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// claimEvent(pay,uint64)void
*abi_route_claimEvent:
	// eventID: uint64
	txna ApplicationArgs 1
	btoi

	// feeAndMbrPayment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (feeAndMbrPayment) for claimEvent must be a pay transaction
	assert

	// execute claimEvent(pay,uint64)void
	callsub claimEvent
	intc 0 // 1
	return

// claimEvent(feeAndMbrPayment: PayTxn, eventID : EventID): void
claimEvent:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dup

	// contracts/Events.algo.ts:62
	// verifyPayTxn(feeAndMbrPayment, { receiver: this.app.address })
	// verify receiver
	frame_dig -1 // feeAndMbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"feeAndMbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// contracts/Events.algo.ts:63
	// eventInfo = this.allEvents(eventID).value
	bytec 1 //  "e"
	frame_dig -2 // eventID: EventID
	itob
	concat
	frame_bury 0 // storage key//eventInfo

	// contracts/Events.algo.ts:65
	// assert(this.txn.sender !== eventInfo.EventCreator, 'drop creator cannot claim')
	txn Sender
	frame_dig 0 // storage key//eventInfo
	box_get

	// box value does not exist: this.allEvents(eventID).value
	assert
	store 255 // full array
	load 255 // full array
	extract 10 32
	!=

	// drop creator cannot claim
	assert

	// contracts/Events.algo.ts:66
	// claimKey = { EventID: eventID, Address: this.txn.sender } as AddressClaimKey
	frame_dig -2 // eventID: EventID
	itob
	txn Sender
	concat
	frame_bury 1 // claimKey: (uint64,address)

	// contracts/Events.algo.ts:68
	// assert(!this.participantsMap(claimKey).exists, 'already claimed')
	bytec 3 //  "c"
	frame_dig 1 // claimKey: (uint64,address)
	concat
	box_len
	swap
	pop
	!

	// already claimed
	assert

	// contracts/Events.algo.ts:69
	// this.participantsMap(claimKey).value = { TxnId: this.txn.txID as bytes32 }
	bytec 3 //  "c"
	frame_dig 1 // claimKey: (uint64,address)
	concat
	txn TxID
	pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	dup
	extract 32 0
	bytec 2 // 0x
	b==
	assert
	extract 0 32
	box_put

	// contracts/Events.algo.ts:71
	// this.allEvents(eventID).value.RegisteredCount += 1
	bytec 1 //  "e"
	frame_dig -2 // eventID: EventID
	itob
	concat
	box_get

	// box value does not exist: this.allEvents(eventID).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 68
	bytec 1 //  "e"
	frame_dig -2 // eventID: EventID
	itob
	concat
	box_get

	// box value does not exist: this.allEvents(eventID).value
	assert
	store 255 // full array
	load 255 // full array
	extract 68 8
	btoi
	intc 0 // 1
	+
	itob
	replace3
	bytec 1 //  "e"
	frame_dig -2 // eventID: EventID
	itob
	concat
	dup
	box_del
	pop
	swap
	box_put
	retsub

*create_NoOp:
	pushbytes 0xd324bea4 // method "createApplication(address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xf5a4a934 // method "createEvent(pay,(uint64,string,address,uint64,string,uint64,uint64,uint64))uint64"
	pushbytes 0x3c09c9bc // method "claimEvent(pay,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createEvent *abi_route_claimEvent

	// this contract does not implement the given ABI method for call NoOp
	err