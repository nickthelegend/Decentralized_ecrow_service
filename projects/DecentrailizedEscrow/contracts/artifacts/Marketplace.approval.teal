#pragma version 10
intcblock 0 1 4
bytecblock 0x7061796d656e74416d6f756e74 0x73656c6c6572 0x717565737441737365744944 0x6e667441737365744944 0x6275796572 0x7072696365

// This TEAL was generated by TEALScript v0.105.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address,uint64)void
*abi_route_createApplication:
	// price: uint64
	txna ApplicationArgs 2
	btoi

	// seller: address
	txna ApplicationArgs 1
	dup
	len
	pushint 32
	==

	// argument 1 (seller) for createApplication must be a address
	assert

	// execute createApplication(address,uint64)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(seller: Address, price: uint64): void
createApplication:
	proto 2 0

	// contracts/Marketplace.algo.ts:24
	// this.price.value = price
	bytec 5 //  "price"
	frame_dig -2 // price: uint64
	app_global_put

	// contracts/Marketplace.algo.ts:25
	// this.paymentAmount.value = 0
	bytec 0 //  "paymentAmount"
	intc 0 // 0
	app_global_put

	// contracts/Marketplace.algo.ts:26
	// this.seller.value = seller
	bytec 1 //  "seller"
	frame_dig -1 // seller: Address
	app_global_put

	// contracts/Marketplace.algo.ts:27
	// this.buyer.value = Address.zeroAddress
	bytec 4 //  "buyer"
	global ZeroAddress
	app_global_put

	// contracts/Marketplace.algo.ts:28
	// this.nftAssetID.value = AssetID.zeroIndex
	bytec 3 //  "nftAssetID"
	intc 0 // 0
	app_global_put

	// contracts/Marketplace.algo.ts:29
	// this.questAssetID.value = AssetID.zeroIndex
	bytec 2 //  "questAssetID"
	intc 0 // 0
	app_global_put
	retsub

// optIntoAsset(uint64)void
*abi_route_optIntoAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optIntoAsset(uint64)void
	callsub optIntoAsset
	intc 1 // 1
	return

// optIntoAsset(asset: AssetID): void
optIntoAsset:
	proto 1 0

	// Verify a ASA hasn't already been opted into
	// contracts/Marketplace.algo.ts:37
	// assert(this.questAssetID.value === AssetID.zeroIndex)
	bytec 2 //  "questAssetID"
	app_global_get
	intc 0 // 0
	==
	assert

	// Save ASA ID in global state
	// contracts/Marketplace.algo.ts:40
	// this.questAssetID.value = asset
	bytec 2 //  "questAssetID"
	frame_dig -1 // asset: AssetID
	app_global_put

	// Submit opt-in transaction: 0 asset transfer to self
	// contracts/Marketplace.algo.ts:43
	// sendAssetTransfer({
	//           assetReceiver: this.app.address,
	//           xferAsset: asset,
	//           assetAmount: 0,
	//         })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Marketplace.algo.ts:44
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/Marketplace.algo.ts:45
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/Marketplace.algo.ts:46
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// optIntoNFT(uint64)void
*abi_route_optIntoNFT:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optIntoNFT(uint64)void
	callsub optIntoNFT
	intc 1 // 1
	return

// optIntoNFT(asset: AssetID): void
optIntoNFT:
	proto 1 0

	// Verify a ASA hasn't already been opted into
	// contracts/Marketplace.algo.ts:54
	// assert(this.nftAssetID.value === AssetID.zeroIndex)
	bytec 3 //  "nftAssetID"
	app_global_get
	intc 0 // 0
	==
	assert

	// Save ASA ID in global state
	// contracts/Marketplace.algo.ts:57
	// this.nftAssetID.value = asset
	bytec 3 //  "nftAssetID"
	frame_dig -1 // asset: AssetID
	app_global_put

	// Submit opt-in transaction: 0 asset transfer to self
	// contracts/Marketplace.algo.ts:60
	// sendAssetTransfer({
	//           assetReceiver: this.app.address,
	//           xferAsset: asset,
	//           assetAmount: 0,
	//         })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Marketplace.algo.ts:61
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/Marketplace.algo.ts:62
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/Marketplace.algo.ts:63
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// takeFunds()void
*abi_route_takeFunds:
	// execute takeFunds()void
	callsub takeFunds
	intc 1 // 1
	return

// takeFunds(): void
takeFunds:
	proto 0 0

	// contracts/Marketplace.algo.ts:69
	// assert(
	//           this.txn.sender === this.app.creator ||
	//             this.txn.sender === this.seller.value
	//         )
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	dup
	bnz *skip_or0
	txn Sender
	bytec 1 //  "seller"
	app_global_get
	==
	||

*skip_or0:
	assert

	// contracts/Marketplace.algo.ts:73
	// assert(this.paymentAmount.value >= this.price.value)
	bytec 0 //  "paymentAmount"
	app_global_get
	bytec 5 //  "price"
	app_global_get
	>=
	assert

	// contracts/Marketplace.algo.ts:75
	// sendPayment({
	//           receiver: this.seller.value,
	//           amount: this.paymentAmount.value,
	//         })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// contracts/Marketplace.algo.ts:76
	// receiver: this.seller.value
	bytec 1 //  "seller"
	app_global_get
	itxn_field Receiver

	// contracts/Marketplace.algo.ts:77
	// amount: this.paymentAmount.value
	bytec 0 //  "paymentAmount"
	app_global_get
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Marketplace.algo.ts:79
	// this.paymentAmount.value = 0
	bytec 0 //  "paymentAmount"
	intc 0 // 0
	app_global_put
	retsub

// buyNFT(axfer)void
*abi_route_buyNFT:
	// ebaTxn: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 2 //  axfer
	==

	// argument 0 (ebaTxn) for buyNFT must be a axfer transaction
	assert

	// execute buyNFT(axfer)void
	callsub buyNFT
	intc 1 // 1
	return

// buyNFT(ebaTxn: AssetTransferTxn): void
buyNFT:
	proto 1 0

	// contracts/Marketplace.algo.ts:85
	// verifyAssetTransferTxn(ebaTxn, {
	//             assetReceiver: this.app.address,
	//             xferAsset: this.questAssetID.value
	//         })
	// verify assetReceiver
	frame_dig -1 // ebaTxn: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"ebaTxn","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // ebaTxn: AssetTransferTxn
	gtxns XferAsset
	bytec 2 //  "questAssetID"
	app_global_get
	==

	// transaction verification failed: {"txn":"ebaTxn","field":"xferAsset","expected":"this.questAssetID.value"}
	assert

	// contracts/Marketplace.algo.ts:89
	// this.buyer.value = this.txn.sender
	bytec 4 //  "buyer"
	txn Sender
	app_global_put

	// contracts/Marketplace.algo.ts:90
	// this.paymentAmount.value = ebaTxn.assetAmount
	bytec 0 //  "paymentAmount"
	frame_dig -1 // ebaTxn: AssetTransferTxn
	gtxns AssetAmount
	app_global_put
	retsub

// recieveNFT(uint64)void
*abi_route_recieveNFT:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute recieveNFT(uint64)void
	callsub recieveNFT
	intc 1 // 1
	return

// recieveNFT(asset: AssetID): void
recieveNFT:
	proto 1 0

	// contracts/Marketplace.algo.ts:95
	// assert( this.txn.sender === this.buyer.value)
	txn Sender
	bytec 4 //  "buyer"
	app_global_get
	==
	assert

	// contracts/Marketplace.algo.ts:96
	// assert(this.paymentAmount.value >= this.price.value)
	bytec 0 //  "paymentAmount"
	app_global_get
	bytec 5 //  "price"
	app_global_get
	>=
	assert

	// contracts/Marketplace.algo.ts:98
	// sendAssetTransfer({
	//             assetReceiver: this.buyer.value,
	//             xferAsset: asset,
	//             assetAmount: 1,
	//           })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Marketplace.algo.ts:99
	// assetReceiver: this.buyer.value
	bytec 4 //  "buyer"
	app_global_get
	itxn_field AssetReceiver

	// contracts/Marketplace.algo.ts:100
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts/Marketplace.algo.ts:101
	// assetAmount: 1
	intc 1 // 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// cancelSell()void
*abi_route_cancelSell:
	// execute cancelSell()void
	callsub cancelSell
	intc 1 // 1
	return

// cancelSell(): void
cancelSell:
	proto 0 0

	// contracts/Marketplace.algo.ts:106
	// assert( this.txn.sender === this.seller.value)
	txn Sender
	bytec 1 //  "seller"
	app_global_get
	==
	assert

	// contracts/Marketplace.algo.ts:108
	// sendAssetTransfer({
	//             assetReceiver: this.seller.value,
	//             xferAsset: this.nftAssetID.value,
	//             assetAmount: 1,
	//           })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/Marketplace.algo.ts:109
	// assetReceiver: this.seller.value
	bytec 1 //  "seller"
	app_global_get
	itxn_field AssetReceiver

	// contracts/Marketplace.algo.ts:110
	// xferAsset: this.nftAssetID.value
	bytec 3 //  "nftAssetID"
	app_global_get
	itxn_field XferAsset

	// contracts/Marketplace.algo.ts:111
	// assetAmount: 1
	intc 1 // 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0xcd19f1a6 // method "createApplication(address,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x3987f0c1 // method "optIntoAsset(uint64)void"
	pushbytes 0x18ca81f5 // method "optIntoNFT(uint64)void"
	pushbytes 0xf9aac434 // method "takeFunds()void"
	pushbytes 0x057746ea // method "buyNFT(axfer)void"
	pushbytes 0xadeb3d1a // method "recieveNFT(uint64)void"
	pushbytes 0x1bf811d3 // method "cancelSell()void"
	txna ApplicationArgs 0
	match *abi_route_optIntoAsset *abi_route_optIntoNFT *abi_route_takeFunds *abi_route_buyNFT *abi_route_recieveNFT *abi_route_cancelSell

	// this contract does not implement the given ABI method for call NoOp
	err