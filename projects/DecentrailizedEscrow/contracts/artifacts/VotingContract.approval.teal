#pragma version 10
intcblock 1 0
bytecblock 0x6c6f63616c5374617465 0x766f74696e67456e6454696d65 0x766f746531 0x766f746532 0x766f74654465736372697074696f6e 0x766f74655469746c65 0x6f776e6572 0x0000

// This TEAL was generated by TEALScript v0.105.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address)void
*abi_route_createApplication:
	// ownerAddress: address
	txna ApplicationArgs 1
	dup
	len
	pushint 32
	==

	// argument 0 (ownerAddress) for createApplication must be a address
	assert

	// execute createApplication(address)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(ownerAddress: Address): void
createApplication:
	proto 1 0

	// contracts/Voting.algo.ts:18
	// this.vote1.value = 0
	bytec 2 //  "vote1"
	intc 1 // 0
	app_global_put

	// contracts/Voting.algo.ts:19
	// this.vote2.value = 0
	bytec 3 //  "vote2"
	intc 1 // 0
	app_global_put

	// contracts/Voting.algo.ts:20
	// this.owner.value = ownerAddress
	bytec 6 //  "owner"
	frame_dig -1 // ownerAddress: Address
	app_global_put

	// contracts/Voting.algo.ts:21
	// this.voteTitle.value = ""
	bytec 5 //  "voteTitle"
	bytec 7 // 0x0000
	app_global_put

	// contracts/Voting.algo.ts:22
	// this.voteDescription.value = ""
	bytec 4 //  "voteDescription"
	bytec 7 // 0x0000
	app_global_put

	// contracts/Voting.algo.ts:23
	// this.votingEndTime.value = 0
	bytec 1 //  "votingEndTime"
	intc 1 // 0
	app_global_put
	retsub

// createVote(string,string,uint64)void
*abi_route_createVote:
	// duration: uint64
	txna ApplicationArgs 3
	btoi

	// description: string
	txna ApplicationArgs 2
	extract 2 0

	// title: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createVote(string,string,uint64)void
	callsub createVote
	intc 0 // 1
	return

// createVote(title: string, description: string, duration: uint64): void
createVote:
	proto 3 0

	// contracts/Voting.algo.ts:29
	// assert(this.txn.sender === this.owner.value)
	txn Sender
	bytec 6 //  "owner"
	app_global_get
	==
	assert

	// contracts/Voting.algo.ts:30
	// this.voteTitle.value = title
	bytec 5 //  "voteTitle"
	frame_dig -1 // title: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/Voting.algo.ts:31
	// this.voteDescription.value = description
	bytec 4 //  "voteDescription"
	frame_dig -2 // description: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/Voting.algo.ts:34
	// this.votingEndTime.value = globals.latestTimestamp + duration
	bytec 1 //  "votingEndTime"
	global LatestTimestamp
	frame_dig -3 // duration: uint64
	+
	app_global_put
	retsub

// vote(uint64)void
*abi_route_vote:
	// option: uint64
	txna ApplicationArgs 1
	btoi

	// execute vote(uint64)void
	callsub vote
	intc 0 // 1
	return

// vote(option: uint64): void
vote:
	proto 1 0

	// contracts/Voting.algo.ts:40
	// assert(globals.latestTimestamp < this.votingEndTime.value)
	global LatestTimestamp
	bytec 1 //  "votingEndTime"
	app_global_get
	<
	assert

	// contracts/Voting.algo.ts:42
	// assert(!(this.localState(this.txn.sender).value === this.txn.sender))
	txn Sender
	bytec 0 //  "localState"
	app_local_get
	txn Sender
	==
	!
	assert

	// *if0_condition
	// contracts/Voting.algo.ts:44
	// option == 1
	frame_dig -1 // option: uint64
	intc 0 // 1
	==
	bz *if0_elseif1_condition

	// *if0_consequent
	// contracts/Voting.algo.ts:45
	// this.vote1.value += 1
	bytec 2 //  "vote1"
	app_global_get
	intc 0 // 1
	+
	bytec 2 //  "vote1"
	swap
	app_global_put

	// contracts/Voting.algo.ts:46
	// this.localState(this.txn.sender).value = this.txn.sender
	txn Sender
	bytec 0 //  "localState"
	txn Sender
	app_local_put
	b *if0_end

*if0_elseif1_condition:
	// contracts/Voting.algo.ts:47
	// option == 2
	frame_dig -1 // option: uint64
	pushint 2
	==
	bz *if0_end

	// *if0_elseif1_consequent
	// contracts/Voting.algo.ts:48
	// this.vote2.value += 1
	bytec 3 //  "vote2"
	app_global_get
	intc 0 // 1
	+
	bytec 3 //  "vote2"
	swap
	app_global_put

	// contracts/Voting.algo.ts:49
	// this.localState(this.txn.sender).value = this.txn.sender
	txn Sender
	bytec 0 //  "localState"
	txn Sender
	app_local_put

*if0_end:
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	intc 0 // 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0

	// contracts/Voting.algo.ts:55
	// this.localState(this.txn.sender).value = Address.zeroAddress
	txn Sender
	bytec 0 //  "localState"
	global ZeroAddress
	app_local_put
	retsub

*create_NoOp:
	pushbytes 0xd324bea4 // method "createApplication(address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xd1331fdc // method "createVote(string,string,uint64)void"
	pushbytes 0x31d5c300 // method "vote(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createVote *abi_route_vote

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	pushbytes 0x01a3a3ff // method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err