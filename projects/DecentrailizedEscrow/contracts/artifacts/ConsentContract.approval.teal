#pragma version 10
intcblock 1
bytecblock 0x737461747573 0x65787069726174696f6e44617465 0x6f776e6572 0x0000 0x636f6e73656e7444617461 0x416374697665 0x636f6e73656e745469746c65 0x6f7267616e697a6174696f6e 0x6465736372697074696f6e 0x636f6e73656e7448617368 0x0006416374697665

// This TEAL was generated by TEALScript v0.105.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address)void
*abi_route_createApplication:
	// ownerAddress: address
	txna ApplicationArgs 1
	dup
	len
	pushint 32
	==

	// argument 0 (ownerAddress) for createApplication must be a address
	assert

	// execute createApplication(address)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(ownerAddress: Address): void
createApplication:
	proto 1 0

	// contracts/ConsentContract.algo.ts:19
	// this.consentTitle.value = ""
	bytec 6 //  "consentTitle"
	bytec 3 // 0x0000
	app_global_put

	// contracts/ConsentContract.algo.ts:20
	// this.description.value = ""
	bytec 8 //  "description"
	bytec 3 // 0x0000
	app_global_put

	// contracts/ConsentContract.algo.ts:21
	// this.organization.value = ""
	bytec 7 //  "organization"
	bytec 3 // 0x0000
	app_global_put

	// contracts/ConsentContract.algo.ts:22
	// this.expirationDate.value = 0
	bytec 1 //  "expirationDate"
	pushint 0
	app_global_put

	// contracts/ConsentContract.algo.ts:23
	// this.consentHash.value = ""
	bytec 9 //  "consentHash"
	bytec 3 // 0x0000
	app_global_put

	// contracts/ConsentContract.algo.ts:24
	// this.status.value = "Active"
	bytec 0 //  "status"
	bytec 10 // 0x0006416374697665
	app_global_put

	// contracts/ConsentContract.algo.ts:25
	// this.owner.value = ownerAddress
	bytec 2 //  "owner"
	frame_dig -1 // ownerAddress: Address
	app_global_put
	retsub

// createBox()void
*abi_route_createBox:
	// execute createBox()void
	callsub createBox
	intc 0 // 1
	return

// createBox(): void
createBox:
	proto 0 0

	// contracts/ConsentContract.algo.ts:29
	// this.consentDataBox.create(400)
	bytec 4 //  "consentData"
	pushint 400
	box_create
	pop
	retsub

// createConsent(string,string,string,uint64,string,string)void
*abi_route_createConsent:
	// consetData: string
	txna ApplicationArgs 6
	extract 2 0

	// consentHash: string
	txna ApplicationArgs 5
	extract 2 0

	// duration: uint64
	txna ApplicationArgs 4
	btoi

	// organization: string
	txna ApplicationArgs 3
	extract 2 0

	// description: string
	txna ApplicationArgs 2
	extract 2 0

	// title: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createConsent(string,string,string,uint64,string,string)void
	callsub createConsent
	intc 0 // 1
	return

// createConsent(title: string, description: string, organization: string, duration: uint64, consentHash: string, consetData: string): void
createConsent:
	proto 6 0

	// contracts/ConsentContract.algo.ts:42
	// assert(this.txn.sender === this.owner.value)
	txn Sender
	bytec 2 //  "owner"
	app_global_get
	==
	assert

	// contracts/ConsentContract.algo.ts:43
	// this.consentTitle.value = title
	bytec 6 //  "consentTitle"
	frame_dig -1 // title: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/ConsentContract.algo.ts:44
	// this.description.value = description
	bytec 8 //  "description"
	frame_dig -2 // description: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/ConsentContract.algo.ts:45
	// this.organization.value = organization
	bytec 7 //  "organization"
	frame_dig -3 // organization: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/ConsentContract.algo.ts:47
	// this.expirationDate.value = globals.latestTimestamp + duration
	bytec 1 //  "expirationDate"
	global LatestTimestamp
	frame_dig -4 // duration: uint64
	+
	app_global_put

	// contracts/ConsentContract.algo.ts:48
	// this.consentHash.value = consentHash
	bytec 9 //  "consentHash"
	frame_dig -5 // consentHash: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/ConsentContract.algo.ts:49
	// this.status.value = "Active"
	bytec 0 //  "status"
	bytec 10 // 0x0006416374697665
	app_global_put

	// contracts/ConsentContract.algo.ts:52
	// this.consentDataBox.value = consetData
	bytec 4 //  "consentData"
	dup
	box_del
	pop
	frame_dig -6 // consetData: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_put
	retsub

// revokeConsent()void
*abi_route_revokeConsent:
	// execute revokeConsent()void
	callsub revokeConsent
	intc 0 // 1
	return

// revokeConsent(): void
revokeConsent:
	proto 0 0

	// contracts/ConsentContract.algo.ts:58
	// assert(this.txn.sender === this.owner.value)
	txn Sender
	bytec 2 //  "owner"
	app_global_get
	==
	assert

	// contracts/ConsentContract.algo.ts:60
	// assert(this.status.value === "Active")
	bytec 0 //  "status"
	app_global_get
	extract 2 0
	bytec 5 //  "Active"
	==
	assert

	// contracts/ConsentContract.algo.ts:61
	// this.status.value = "Revoked"
	bytec 0 //  "status"
	pushbytes 0x00075265766f6b6564
	app_global_put
	retsub

// extendConsent(uint64)void
*abi_route_extendConsent:
	// duration: uint64
	txna ApplicationArgs 1
	btoi

	// execute extendConsent(uint64)void
	callsub extendConsent
	intc 0 // 1
	return

// extendConsent(duration: uint64): void
extendConsent:
	proto 1 0

	// contracts/ConsentContract.algo.ts:67
	// assert(this.txn.sender === this.owner.value)
	txn Sender
	bytec 2 //  "owner"
	app_global_get
	==
	assert

	// contracts/ConsentContract.algo.ts:69
	// assert(this.status.value === "Active")
	bytec 0 //  "status"
	app_global_get
	extract 2 0
	bytec 5 //  "Active"
	==
	assert

	// contracts/ConsentContract.algo.ts:71
	// this.expirationDate.value += duration
	bytec 1 //  "expirationDate"
	app_global_get
	frame_dig -1 // duration: uint64
	+
	bytec 1 //  "expirationDate"
	swap
	app_global_put
	retsub

// updateStatus()void
*abi_route_updateStatus:
	// execute updateStatus()void
	callsub updateStatus
	intc 0 // 1
	return

// updateStatus(): void
updateStatus:
	proto 0 0

	// *if0_condition
	// contracts/ConsentContract.algo.ts:77
	// globals.latestTimestamp > this.expirationDate.value && this.status.value === "Active"
	global LatestTimestamp
	bytec 1 //  "expirationDate"
	app_global_get
	>
	dup
	bz *skip_and0
	bytec 0 //  "status"
	app_global_get
	extract 2 0
	bytec 5 //  "Active"
	==
	&&

*skip_and0:
	bz *if0_end

	// *if0_consequent
	// contracts/ConsentContract.algo.ts:78
	// this.status.value = "Expired"
	bytec 0 //  "status"
	pushbytes 0x000745787069726564
	app_global_put

*if0_end:
	retsub

*create_NoOp:
	pushbytes 0xd324bea4 // method "createApplication(address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xea045036 // method "createBox()void"
	pushbytes 0xa37fecaf // method "createConsent(string,string,string,uint64,string,string)void"
	pushbytes 0x6b296f35 // method "revokeConsent()void"
	pushbytes 0x5ea469e6 // method "extendConsent(uint64)void"
	pushbytes 0x1f1bd21c // method "updateStatus()void"
	txna ApplicationArgs 0
	match *abi_route_createBox *abi_route_createConsent *abi_route_revokeConsent *abi_route_extendConsent *abi_route_updateStatus

	// this contract does not implement the given ABI method for call NoOp
	err