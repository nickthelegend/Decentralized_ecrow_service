#pragma version 10
intcblock 0 1 4 734399300 32
bytecblock 0x71756573745469746c65

// This TEAL was generated by TEALScript v0.105.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(string,string,uint64)void
*abi_route_createApplication:
	// expiryDate: uint64
	txna ApplicationArgs 3
	btoi

	// questLocation: string
	txna ApplicationArgs 2
	extract 2 0

	// questTitle: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(string,string,uint64)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(questTitle: string, questLocation: string, expiryDate: uint64): void
createApplication:
	proto 3 0

	// contracts/QuestContract.algo.ts:24
	// assert(this.app.id == 0, "This method can only be called during application creation")
	txna Applications 0
	intc 0 // 0
	==

	// This method can only be called during application creation
	assert

	// contracts/QuestContract.algo.ts:27
	// this.questTitle.value = questTitle
	bytec 0 //  "questTitle"
	frame_dig -1 // questTitle: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/QuestContract.algo.ts:28
	// this.questLocation.value = questLocation
	pushbytes 0x71756573744c6f636174696f6e // "questLocation"
	frame_dig -2 // questLocation: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/QuestContract.algo.ts:29
	// this.expiryDate.value = expiryDate
	pushbytes 0x65787069727944617465 // "expiryDate"
	frame_dig -3 // expiryDate: uint64
	app_global_put
	retsub

// createNFTReward(string)uint64
*abi_route_createNFTReward:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// assetUrl: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createNFTReward(string)uint64
	callsub createNFTReward
	itob
	concat
	log
	intc 1 // 1
	return

// createNFTReward(assetUrl : string): uint64
createNFTReward:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	pushbytes 0x

	// contracts/QuestContract.algo.ts:35
	// itxnResult = sendAssetCreation({
	//           configAssetTotal: 1,  // Use configAssetTotal instead of total
	//           configAssetDecimals: 0,      // Use configAssetDecimals instead of decimals
	//           configAssetUnitName: "NFT",  // Use configAssetUnitName instead of unitName
	//           configAssetName: this.questTitle.value, // Use configAssetName instead of assetName
	//           configAssetURL : assetUrl,
	//           fee: 3000,
	//
	//         })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts/QuestContract.algo.ts:36
	// configAssetTotal: 1
	intc 1 // 1
	itxn_field ConfigAssetTotal

	// contracts/QuestContract.algo.ts:37
	// configAssetDecimals: 0
	intc 0 // 0
	itxn_field ConfigAssetDecimals

	// contracts/QuestContract.algo.ts:38
	// configAssetUnitName: "NFT"
	pushbytes 0x4e4654 // "NFT"
	itxn_field ConfigAssetUnitName

	// contracts/QuestContract.algo.ts:39
	// configAssetName: this.questTitle.value
	bytec 0 //  "questTitle"
	app_global_get
	extract 2 0
	itxn_field ConfigAssetName

	// contracts/QuestContract.algo.ts:40
	// configAssetURL : assetUrl
	frame_dig -1 // assetUrl: string
	itxn_field ConfigAssetURL

	// contracts/QuestContract.algo.ts:41
	// fee: 3000
	pushint 3000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // itxnResult: uint64

	// contracts/QuestContract.algo.ts:45
	// return itxnResult.id
	frame_dig 0 // itxnResult: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// optIntoAsset()void
*abi_route_optIntoAsset:
	// execute optIntoAsset()void
	callsub optIntoAsset
	intc 1 // 1
	return

// optIntoAsset(): void
optIntoAsset:
	proto 0 0

	// Only allow app creator to opt the app account into a ASA
	// contracts/QuestContract.algo.ts:51
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"globals.creatorAddress"}
	assert

	// Submit opt-in transaction: 0 asset transfer to self
	// contracts/QuestContract.algo.ts:56
	// sendAssetTransfer({
	//           assetReceiver: this.app.address,
	//           xferAsset: AssetID.fromUint64(734399300),
	//           assetAmount: 0,
	//         })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/QuestContract.algo.ts:57
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/QuestContract.algo.ts:58
	// xferAsset: AssetID.fromUint64(734399300)
	intc 3 // 734399300
	itxn_field XferAsset

	// contracts/QuestContract.algo.ts:59
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// sendRewardWinner1(address)void
*abi_route_sendRewardWinner1:
	// winner: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 0 (winner) for sendRewardWinner1 must be a address
	assert

	// execute sendRewardWinner1(address)void
	callsub sendRewardWinner1
	intc 1 // 1
	return

// sendRewardWinner1(winner: Address): void
sendRewardWinner1:
	proto 1 0

	// contracts/QuestContract.algo.ts:70
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"globals.creatorAddress"}
	assert

	// contracts/QuestContract.algo.ts:72
	// sendAssetTransfer({
	//           xferAsset: this.reward1.value, // Use the value directly, don't wrap it in AssetID()
	//           assetReceiver: winner,
	//           assetAmount: 1,
	//           fee: 0
	//         })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/QuestContract.algo.ts:73
	// xferAsset: this.reward1.value
	pushbytes 0x72657761726431 // "reward1"
	app_global_get
	itxn_field XferAsset

	// contracts/QuestContract.algo.ts:74
	// assetReceiver: winner
	frame_dig -1 // winner: Address
	itxn_field AssetReceiver

	// contracts/QuestContract.algo.ts:75
	// assetAmount: 1
	intc 1 // 1
	itxn_field AssetAmount

	// contracts/QuestContract.algo.ts:76
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/QuestContract.algo.ts:80
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(734399300), // Use the value directly, don't wrap it in AssetID()
	//           assetReceiver: winner,
	//           assetAmount: 100,
	//           fee: 0
	//         })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/QuestContract.algo.ts:81
	// xferAsset: AssetID.fromUint64(734399300)
	intc 3 // 734399300
	itxn_field XferAsset

	// contracts/QuestContract.algo.ts:82
	// assetReceiver: winner
	frame_dig -1 // winner: Address
	itxn_field AssetReceiver

	// contracts/QuestContract.algo.ts:83
	// assetAmount: 100
	pushint 100
	itxn_field AssetAmount

	// contracts/QuestContract.algo.ts:84
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// sendRewardWinner2(address)void
*abi_route_sendRewardWinner2:
	// winner: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 0 (winner) for sendRewardWinner2 must be a address
	assert

	// execute sendRewardWinner2(address)void
	callsub sendRewardWinner2
	intc 1 // 1
	return

// sendRewardWinner2(winner: Address): void
sendRewardWinner2:
	proto 1 0

	// contracts/QuestContract.algo.ts:94
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(734399300), // Use the value directly, don't wrap it in AssetID()
	//           assetReceiver: winner,
	//           assetAmount: 50,
	//           fee: 0
	//         })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/QuestContract.algo.ts:95
	// xferAsset: AssetID.fromUint64(734399300)
	intc 3 // 734399300
	itxn_field XferAsset

	// contracts/QuestContract.algo.ts:96
	// assetReceiver: winner
	frame_dig -1 // winner: Address
	itxn_field AssetReceiver

	// contracts/QuestContract.algo.ts:97
	// assetAmount: 50
	pushint 50
	itxn_field AssetAmount

	// contracts/QuestContract.algo.ts:98
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// sendRewardWinner3(address)void
*abi_route_sendRewardWinner3:
	// winner: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 0 (winner) for sendRewardWinner3 must be a address
	assert

	// execute sendRewardWinner3(address)void
	callsub sendRewardWinner3
	intc 1 // 1
	return

// sendRewardWinner3(winner: Address): void
sendRewardWinner3:
	proto 1 0

	// contracts/QuestContract.algo.ts:106
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(734399300), // Use the value directly, don't wrap it in AssetID()
	//           assetReceiver: winner,
	//           assetAmount: 25,
	//           fee: 0
	//         })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts/QuestContract.algo.ts:107
	// xferAsset: AssetID.fromUint64(734399300)
	intc 3 // 734399300
	itxn_field XferAsset

	// contracts/QuestContract.algo.ts:108
	// assetReceiver: winner
	frame_dig -1 // winner: Address
	itxn_field AssetReceiver

	// contracts/QuestContract.algo.ts:109
	// assetAmount: 25
	pushint 25
	itxn_field AssetAmount

	// contracts/QuestContract.algo.ts:110
	// fee: 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0xc04b75f4 // method "createApplication(string,string,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xadd36a02 // method "createNFTReward(string)uint64"
	pushbytes 0xbb757b1c // method "optIntoAsset()void"
	pushbytes 0x2b08bb75 // method "sendRewardWinner1(address)void"
	pushbytes 0xa6733df1 // method "sendRewardWinner2(address)void"
	pushbytes 0x0e9b80f2 // method "sendRewardWinner3(address)void"
	txna ApplicationArgs 0
	match *abi_route_createNFTReward *abi_route_optIntoAsset *abi_route_sendRewardWinner1 *abi_route_sendRewardWinner2 *abi_route_sendRewardWinner3

	// this contract does not implement the given ABI method for call NoOp
	err