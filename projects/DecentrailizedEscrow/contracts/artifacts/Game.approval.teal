#pragma version 10
intcblock 1 0 32 45
bytecblock 0x6465706f7369746564416d6f756e74 0x706c6179657232 0x706c61796572314d6f7665 0x706c61796572324d6f7665 0x706c6179657231 0x706c61796572314368616e636573 0x706c61796572324368616e636573

// This TEAL was generated by TEALScript v0.105.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts/Game.algo.ts:23
	// this.depositedAmount.value = 0
	bytec 0 //  "depositedAmount"
	intc 1 // 0
	app_global_put

	// contracts/Game.algo.ts:24
	// this.maxDepositAmount.value = 5
	pushbytes 0x6d61784465706f736974416d6f756e74 // "maxDepositAmount"
	pushint 5
	app_global_put
	retsub

// createBox()void
*abi_route_createBox:
	// execute createBox()void
	callsub createBox
	intc 0 // 1
	return

// createBox(): void
createBox:
	proto 0 0

	// contracts/Game.algo.ts:29
	// this.player1Move.create(45)
	bytec 2 //  "player1Move"
	intc 3 // 45
	box_create
	pop

	// contracts/Game.algo.ts:30
	// this.player2Move.create(45)
	bytec 3 //  "player2Move"
	intc 3 // 45
	box_create
	pop
	retsub

// depositfundsPlayer1(pay)void
*abi_route_depositfundsPlayer1:
	// ftransx: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (ftransx) for depositfundsPlayer1 must be a pay transaction
	assert

	// execute depositfundsPlayer1(pay)void
	callsub depositfundsPlayer1
	intc 0 // 1
	return

// depositfundsPlayer1(ftransx : PayTxn): void
depositfundsPlayer1:
	proto 1 0

	// contracts/Game.algo.ts:35
	// assert(
	//           !this.player1.exists
	//         )
	txna Applications 0
	bytec 4 //  "player1"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/Game.algo.ts:39
	// verifyPayTxn(ftransx, {
	//             receiver: this.app.address,
	//             })
	// verify receiver
	frame_dig -1 // ftransx: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"ftransx","field":"receiver","expected":"this.app.address"}
	assert

	// contracts/Game.algo.ts:42
	// this.depositedAmount.value += ftransx.amount
	bytec 0 //  "depositedAmount"
	app_global_get
	frame_dig -1 // ftransx: PayTxn
	gtxns Amount
	+
	bytec 0 //  "depositedAmount"
	swap
	app_global_put

	// contracts/Game.algo.ts:43
	// this.player1.value=this.txn.sender
	bytec 4 //  "player1"
	txn Sender
	app_global_put
	retsub

// depositfundsPlayer2(pay)void
*abi_route_depositfundsPlayer2:
	// ftransx: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (ftransx) for depositfundsPlayer2 must be a pay transaction
	assert

	// execute depositfundsPlayer2(pay)void
	callsub depositfundsPlayer2
	intc 0 // 1
	return

// depositfundsPlayer2(ftransx : PayTxn): void
depositfundsPlayer2:
	proto 1 0

	// contracts/Game.algo.ts:48
	// assert(
	//           !this.player2.exists
	//         )
	txna Applications 0
	bytec 1 //  "player2"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/Game.algo.ts:52
	// verifyPayTxn(ftransx, {
	//             receiver: this.app.address,
	//             })
	// verify receiver
	frame_dig -1 // ftransx: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"ftransx","field":"receiver","expected":"this.app.address"}
	assert

	// contracts/Game.algo.ts:55
	// this.depositedAmount.value += ftransx.amount
	bytec 0 //  "depositedAmount"
	app_global_get
	frame_dig -1 // ftransx: PayTxn
	gtxns Amount
	+
	bytec 0 //  "depositedAmount"
	swap
	app_global_put

	// contracts/Game.algo.ts:56
	// this.player2.value=this.txn.sender
	bytec 1 //  "player2"
	txn Sender
	app_global_put
	retsub

// sendFunds(address)void
*abi_route_sendFunds:
	// player: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (player) for sendFunds must be a address
	assert

	// execute sendFunds(address)void
	callsub sendFunds
	intc 0 // 1
	return

// sendFunds(player: Address): void
sendFunds:
	proto 1 0

	// contracts/Game.algo.ts:60
	// assert(
	//             this.txn.sender === this.app.creator
	//           )
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/Game.algo.ts:63
	// sendPayment({
	//             receiver: player,
	//             amount: 9000000,
	//           })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/Game.algo.ts:64
	// receiver: player
	frame_dig -1 // player: Address
	itxn_field Receiver

	// contracts/Game.algo.ts:65
	// amount: 9000000
	pushint 9000000
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/Game.algo.ts:67
	// this.depositedAmount.value = 0
	bytec 0 //  "depositedAmount"
	intc 1 // 0
	app_global_put
	retsub

// joinGame(address)void
*abi_route_joinGame:
	// player: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (player) for joinGame must be a address
	assert

	// execute joinGame(address)void
	callsub joinGame
	intc 0 // 1
	return

// joinGame(player: Address): void
joinGame:
	proto 1 0

	// contracts/Game.algo.ts:75
	// assert(
	//             !this.player2.exists
	//           )
	txna Applications 0
	bytec 1 //  "player2"
	app_global_get_ex
	swap
	pop
	!
	assert

	// contracts/Game.algo.ts:79
	// this.player2.value =player
	bytec 1 //  "player2"
	frame_dig -1 // player: Address
	app_global_put
	retsub

// player1turn(string)void
*abi_route_player1turn:
	// move: string
	txna ApplicationArgs 1
	extract 2 0

	// execute player1turn(string)void
	callsub player1turn
	intc 0 // 1
	return

// player1turn(move : string): void
player1turn:
	proto 1 0

	// contracts/Game.algo.ts:86
	// assert(this.txn.sender == this.player1.value )
	txn Sender
	bytec 4 //  "player1"
	app_global_get
	==
	assert

	// contracts/Game.algo.ts:88
	// this.player1Move.value = move
	bytec 2 //  "player1Move"
	dup
	box_del
	pop
	frame_dig -1 // move: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_put

	// contracts/Game.algo.ts:89
	// this.player1Chances.value+=1
	bytec 5 //  "player1Chances"
	app_global_get
	intc 0 // 1
	+
	bytec 5 //  "player1Chances"
	swap
	app_global_put
	retsub

// player2turn(string)void
*abi_route_player2turn:
	// move: string
	txna ApplicationArgs 1
	extract 2 0

	// execute player2turn(string)void
	callsub player2turn
	intc 0 // 1
	return

// player2turn(move : string): void
player2turn:
	proto 1 0

	// contracts/Game.algo.ts:96
	// assert(this.txn.sender == this.player2.value )
	txn Sender
	bytec 1 //  "player2"
	app_global_get
	==
	assert

	// contracts/Game.algo.ts:98
	// this.player2Move.value = move
	bytec 3 //  "player2Move"
	dup
	box_del
	pop
	frame_dig -1 // move: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	box_put

	// contracts/Game.algo.ts:99
	// this.player2Chances.value+=1
	bytec 6 //  "player2Chances"
	app_global_get
	intc 0 // 1
	+
	bytec 6 //  "player2Chances"
	swap
	app_global_put
	retsub

// setWinner(address)void
*abi_route_setWinner:
	// winner: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (winner) for setWinner must be a address
	assert

	// execute setWinner(address)void
	callsub setWinner
	intc 0 // 1
	return

// setWinner(winner : Address): void
setWinner:
	proto 1 0

	// contracts/Game.algo.ts:108
	// assert(this.txn.sender == this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/Game.algo.ts:110
	// this.winner.value = winner
	pushbytes 0x77696e6e6572 // "winner"
	frame_dig -1 // winner: Address
	app_global_put
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xea045036 // method "createBox()void"
	pushbytes 0x2de35ab5 // method "depositfundsPlayer1(pay)void"
	pushbytes 0xfb8e7110 // method "depositfundsPlayer2(pay)void"
	pushbytes 0x3a19d0de // method "sendFunds(address)void"
	pushbytes 0x37fe9dcc // method "joinGame(address)void"
	pushbytes 0xabeced75 // method "player1turn(string)void"
	pushbytes 0x7fec07c4 // method "player2turn(string)void"
	pushbytes 0x1991f3c4 // method "setWinner(address)void"
	txna ApplicationArgs 0
	match *abi_route_createBox *abi_route_depositfundsPlayer1 *abi_route_depositfundsPlayer2 *abi_route_sendFunds *abi_route_joinGame *abi_route_player1turn *abi_route_player2turn *abi_route_setWinner

	// this contract does not implement the given ABI method for call NoOp
	err