#pragma version 10
intcblock 1 0 32
bytecblock 0x7061796d656e74416d6f756e74 0x636f6e646974696f6e4d6574 0x776f726b6572 0x61646d696e 0x00

// This TEAL was generated by TEALScript v0.105.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(address,address)void
*abi_route_createApplication:
	// adminAddress: address
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 32
	==

	// argument 0 (adminAddress) for createApplication must be a address
	assert

	// worker: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (worker) for createApplication must be a address
	assert

	// execute createApplication(address,address)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(worker: Address, adminAddress: Address): void
//
// Initialize the escrow contract
//
// @param worker The worker who will receive the asset if the condition is met
// @param adminAddress The address of the adminfunds
// @param worker The worker who will receive the asset if the condition is met
// @param adminAddress The address of the admin
createApplication:
	proto 2 0

	// contracts/DecentralizedEscrow.algo.ts:24
	// this.paymentAmount.value = 0
	bytec 0 //  "paymentAmount"
	intc 1 // 0
	app_global_put

	// contracts/DecentralizedEscrow.algo.ts:25
	// this.worker.value = worker
	bytec 2 //  "worker"
	frame_dig -1 // worker: Address
	app_global_put

	// contracts/DecentralizedEscrow.algo.ts:26
	// this.conditionMet.value = false
	bytec 1 //  "conditionMet"
	intc 1 // 0
	bytec 4 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	app_global_put

	// contracts/DecentralizedEscrow.algo.ts:27
	// this.admin.value = adminAddress
	bytec 3 //  "admin"
	frame_dig -2 // adminAddress: Address
	app_global_put
	retsub

// setConditionMet()bool
*abi_route_setConditionMet:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// execute setConditionMet()bool
	callsub setConditionMet
	bytec 4 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// setConditionMet(): boolean
//
// Sets the condition to true, allowing funds release, and sends a message to the worker
// This can be called by the boss upon confirmation that work is done or the asset has been delivered.
//
// The address of the worker to confirm identity and send a message
setConditionMet:
	proto 0 1

	// contracts/DecentralizedEscrow.algo.ts:37
	// assert(this.txn.sender === this.app.creator || this.txn.sender === this.admin.value)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	dup
	bnz *skip_or0
	txn Sender
	bytec 3 //  "admin"
	app_global_get
	==
	||

*skip_or0:
	assert

	// contracts/DecentralizedEscrow.algo.ts:38
	// this.conditionMet.value = true
	bytec 1 //  "conditionMet"
	intc 0 // 1
	bytec 4 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	app_global_put

	// contracts/DecentralizedEscrow.algo.ts:39
	// return true;
	intc 0 // 1
	retsub

// addFundsToEscrow(pay)void
*abi_route_addFundsToEscrow:
	// ebaTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (ebaTxn) for addFundsToEscrow must be a pay transaction
	assert

	// execute addFundsToEscrow(pay)void
	callsub addFundsToEscrow
	intc 0 // 1
	return

// addFundsToEscrow(ebaTxn: PayTxn): void
//
// @param ebaTxn The paymentAmount transaction that adds the paymentamount to the escrow
addFundsToEscrow:
	proto 1 0

	// contracts/DecentralizedEscrow.algo.ts:45
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/DecentralizedEscrow.algo.ts:47
	// verifyPayTxn(ebaTxn, {
	//       receiver: this.app.address,
	//     })
	// verify receiver
	frame_dig -1 // ebaTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"ebaTxn","field":"receiver","expected":"this.app.address"}
	assert

	// contracts/DecentralizedEscrow.algo.ts:51
	// this.paymentAmount.value = ebaTxn.amount
	bytec 0 //  "paymentAmount"
	frame_dig -1 // ebaTxn: PayTxn
	gtxns Amount
	app_global_put
	retsub

// releaseFunds()void
*abi_route_releaseFunds:
	// execute releaseFunds()void
	callsub releaseFunds
	intc 0 // 1
	return

// releaseFunds(): void
releaseFunds:
	proto 0 0

	// contracts/DecentralizedEscrow.algo.ts:55
	// assert(
	//       this.txn.sender === this.app.creator ||
	//         this.txn.sender === this.admin.value ||
	//         this.txn.sender === this.worker.value
	//     )
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	dup
	bnz *skip_or1
	txn Sender
	bytec 3 //  "admin"
	app_global_get
	==
	||

*skip_or1:
	dup
	bnz *skip_or2
	txn Sender
	bytec 2 //  "worker"
	app_global_get
	==
	||

*skip_or2:
	assert

	// contracts/DecentralizedEscrow.algo.ts:60
	// assert(this.conditionMet.value)
	bytec 1 //  "conditionMet"
	app_global_get
	intc 1 // 0
	getbit
	assert

	// contracts/DecentralizedEscrow.algo.ts:62
	// sendPayment({
	//       receiver: this.worker.value,
	//       amount: this.paymentAmount.value,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/DecentralizedEscrow.algo.ts:63
	// receiver: this.worker.value
	bytec 2 //  "worker"
	app_global_get
	itxn_field Receiver

	// contracts/DecentralizedEscrow.algo.ts:64
	// amount: this.paymentAmount.value
	bytec 0 //  "paymentAmount"
	app_global_get
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/DecentralizedEscrow.algo.ts:66
	// this.paymentAmount.value = 0
	bytec 0 //  "paymentAmount"
	intc 1 // 0
	app_global_put
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 0 // 1
	return

// deleteApplication(): void
//
// Method to cancel the escrow and delete the application
// Returns any remaining funds or assets to the boss
deleteApplication:
	proto 0 0

	// contracts/DecentralizedEscrow.algo.ts:74
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/DecentralizedEscrow.algo.ts:76
	// sendPayment({
	//       receiver: this.app.creator,
	//       amount: this.paymentAmount.value,
	//       closeRemainderTo: this.app.creator,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/DecentralizedEscrow.algo.ts:77
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts/DecentralizedEscrow.algo.ts:78
	// amount: this.paymentAmount.value
	bytec 0 //  "paymentAmount"
	app_global_get
	itxn_field Amount

	// contracts/DecentralizedEscrow.algo.ts:79
	// closeRemainderTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/DecentralizedEscrow.algo.ts:81
	// this.paymentAmount.value = 0
	bytec 0 //  "paymentAmount"
	intc 1 // 0
	app_global_put
	retsub

*create_NoOp:
	pushbytes 0xb4c77d71 // method "createApplication(address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xa83c73ce // method "setConditionMet()bool"
	pushbytes 0xad1f6d24 // method "addFundsToEscrow(pay)void"
	pushbytes 0x5b7201d5 // method "releaseFunds()void"
	txna ApplicationArgs 0
	match *abi_route_setConditionMet *abi_route_addFundsToEscrow *abi_route_releaseFunds

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err