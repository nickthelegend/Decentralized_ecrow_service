{
  "hints": {
    "createApplication(string,string,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "createReward1(string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createReward2(string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createReward3(string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendRewardWinner1(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendRewardWinner2(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendRewardWinner3(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "questTitle": {
          "type": "bytes",
          "key": "questTitle"
        },
        "questLocation": {
          "type": "bytes",
          "key": "questLocation"
        },
        "winner1": {
          "type": "bytes",
          "key": "winner1"
        },
        "winner2": {
          "type": "bytes",
          "key": "winner2"
        },
        "winner3": {
          "type": "bytes",
          "key": "winner3"
        },
        "expiryDate": {
          "type": "uint64",
          "key": "expiryDate"
        },
        "reward1": {
          "type": "uint64",
          "key": "reward1"
        },
        "reward2": {
          "type": "uint64",
          "key": "reward2"
        },
        "reward3": {
          "type": "uint64",
          "key": "reward3"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 5,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "QuestContract",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "questTitle",
            "type": "string"
          },
          {
            "name": "questLocation",
            "type": "string"
          },
          {
            "name": "expiryDate",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createReward1",
        "args": [
          {
            "name": "assetUrl",
            "type": "string"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "createReward2",
        "args": [
          {
            "name": "assetUrl",
            "type": "string"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "createReward3",
        "args": [
          {
            "name": "assetUrl",
            "type": "string"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "sendRewardWinner1",
        "args": [
          {
            "name": "winner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendRewardWinner2",
        "args": [
          {
            "name": "winner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendRewardWinner3",
        "args": [
          {
            "name": "winner",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}