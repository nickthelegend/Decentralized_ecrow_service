#pragma version 10
intcblock 1 0 32
bytecblock 0x73656c65637465645f76656e646f72 0x64656c69766572795f737461747573 0x63726561746f72 0x 0x626964436f756e746572 0x646561646c696e65 0x6465706f7369746564416d6f756e74 0x0009636f6d706c65746564 0x6d61785f627564676574 0x636f6d706c65746564 0x7175616e74697479 0x6469737061746368 0x70726f64756374 0x0000

// This TEAL was generated by TEALScript v0.105.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(string,string,uint64,uint64)void
*abi_route_createApplication:
	// max_budget: uint64
	txna ApplicationArgs 4
	btoi

	// deadline: uint64
	txna ApplicationArgs 3
	btoi

	// quantity: string
	txna ApplicationArgs 2
	extract 2 0

	// product: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(string,string,uint64,uint64)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(product: string, quantity: string, deadline : uint64, max_budget: uint64): void
createApplication:
	proto 4 0

	// contracts/PurchaseRequest.algo.ts:26
	// this.product.value = product
	bytec 12 //  "product"
	frame_dig -1 // product: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/PurchaseRequest.algo.ts:27
	// this.quantity.value = quantity
	bytec 10 //  "quantity"
	frame_dig -2 // quantity: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts/PurchaseRequest.algo.ts:28
	// this.requestCounter.value = 0
	pushbytes 0x72657175657374436f756e746572 // "requestCounter"
	intc 1 // 0
	app_global_put

	// contracts/PurchaseRequest.algo.ts:29
	// this.bidCounter.value = 0
	bytec 4 //  "bidCounter"
	intc 1 // 0
	app_global_put

	// contracts/PurchaseRequest.algo.ts:30
	// this.deadline.value = deadline
	bytec 5 //  "deadline"
	frame_dig -3 // deadline: uint64
	app_global_put

	// contracts/PurchaseRequest.algo.ts:31
	// this.max_budget.value =max_budget
	bytec 8 //  "max_budget"
	frame_dig -4 // max_budget: uint64
	app_global_put

	// contracts/PurchaseRequest.algo.ts:32
	// this.creator.value = this.txn.sender
	bytec 2 //  "creator"
	txn Sender
	app_global_put
	retsub

// submitBid(uint64,uint64,string)void
*abi_route_submitBid:
	// description: string
	txna ApplicationArgs 3
	extract 2 0

	// deliveryTime: uint64
	txna ApplicationArgs 2
	btoi

	// amount: uint64
	txna ApplicationArgs 1
	btoi

	// execute submitBid(uint64,uint64,string)void
	callsub submitBid
	intc 0 // 1
	return

// submitBid(amount: uint64, deliveryTime: uint64, description: string): void
submitBid:
	proto 3 0

	// contracts/PurchaseRequest.algo.ts:38
	// this.vendorBids(this.txn.sender).value = {
	//           amount: amount,
	//           deliveryTime: deliveryTime,
	//           description: description
	//         }
	txn Sender
	dup
	box_del
	pop
	bytec 3 //  initial head
	bytec 3 //  initial tail
	pushbytes 0x0012 // initial head offset
	frame_dig -1 // amount: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig -2 // deliveryTime: uint64
	itob
	callsub *process_static_tuple_element
	frame_dig -3 // description: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	box_put

	// contracts/PurchaseRequest.algo.ts:44
	// this.bidCounter.value +=1
	bytec 4 //  "bidCounter"
	app_global_get
	intc 0 // 1
	+
	bytec 4 //  "bidCounter"
	swap
	app_global_put
	retsub

// acceptBid(address)void
*abi_route_acceptBid:
	// vendorAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (vendorAddress) for acceptBid must be a address
	assert

	// execute acceptBid(address)void
	callsub acceptBid
	intc 0 // 1
	return

// acceptBid(vendorAddress: Address): void
acceptBid:
	proto 1 0

	// contracts/PurchaseRequest.algo.ts:49
	// assert(this.txn.sender==this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert

	// contracts/PurchaseRequest.algo.ts:51
	// this.selected_vendor.value = vendorAddress
	bytec 0 //  "selected_vendor"
	frame_dig -1 // vendorAddress: Address
	app_global_put
	retsub

// sendFunds(pay)void
*abi_route_sendFunds:
	// payment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (payment) for sendFunds must be a pay transaction
	assert

	// execute sendFunds(pay)void
	callsub sendFunds
	intc 0 // 1
	return

// sendFunds(payment: PayTxn): void
sendFunds:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts/PurchaseRequest.algo.ts:55
	// assert(this.txn.sender == this.creator.value, "Only company can fund the contract.")
	txn Sender
	bytec 2 //  "creator"
	app_global_get
	==

	// Only company can fund the contract.
	assert

	// contracts/PurchaseRequest.algo.ts:56
	// assert(this.selected_vendor.exists, "Vendor must be selected before sending funds.")
	txna Applications 0
	bytec 0 //  "selected_vendor"
	app_global_get_ex
	swap
	pop

	// Vendor must be selected before sending funds.
	assert

	// contracts/PurchaseRequest.algo.ts:59
	// verifyPayTxn(payment, {
	//             receiver: this.app.address,
	//         })
	// verify receiver
	frame_dig -1 // payment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payment","field":"receiver","expected":"this.app.address"}
	assert

	// contracts/PurchaseRequest.algo.ts:64
	// vendorBid = this.vendorBids(this.selected_vendor.value).value
	bytec 0 //  "selected_vendor"
	app_global_get
	frame_bury 0 // storage key//vendorBid

	// contracts/PurchaseRequest.algo.ts:65
	// assert(payment.amount >= vendorBid.amount, "Insufficient funds sent.")
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	frame_dig 0 // storage key//vendorBid
	box_get

	// box value does not exist: this.vendorBids(this.selected_vendor.value).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	>=

	// Insufficient funds sent.
	assert

	// contracts/PurchaseRequest.algo.ts:67
	// this.depositedAmount.value += payment.amount
	bytec 6 //  "depositedAmount"
	app_global_get
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	+
	bytec 6 //  "depositedAmount"
	swap
	app_global_put

	// contracts/PurchaseRequest.algo.ts:69
	// log("Funds deposited into contract escrow.")
	pushbytes 0x46756e6473206465706f736974656420696e746f20636f6e747261637420657363726f772e // "Funds deposited into contract escrow."
	log
	retsub

// confirm_dispatch(address)void
*abi_route_confirm_dispatch:
	// companyAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (companyAddress) for confirm_dispatch must be a address
	assert

	// execute confirm_dispatch(address)void
	callsub confirm_dispatch
	intc 0 // 1
	return

// confirm_dispatch(companyAddress: Address): void
confirm_dispatch:
	proto 1 0

	// contracts/PurchaseRequest.algo.ts:73
	// assert(this.txn.sender == this.selected_vendor.value, "Only the selected vendor can confirm delivery.")
	txn Sender
	bytec 0 //  "selected_vendor"
	app_global_get
	==

	// Only the selected vendor can confirm delivery.
	assert

	// contracts/PurchaseRequest.algo.ts:74
	// assert(globals.latestTimestamp <= this.deadline.value, "Delivery time has passed. Cannot confirm delivery.")
	global LatestTimestamp
	bytec 5 //  "deadline"
	app_global_get
	<=

	// Delivery time has passed. Cannot confirm delivery.
	assert

	// contracts/PurchaseRequest.algo.ts:75
	// assert(companyAddress == this.creator.value, "Only the company can confirm the delivery.")
	frame_dig -1 // companyAddress: Address
	bytec 2 //  "creator"
	app_global_get
	==

	// Only the company can confirm the delivery.
	assert

	// contracts/PurchaseRequest.algo.ts:76
	// this.dispatch_date.value = globals.latestTimestamp
	pushbytes 0x64697370617463685f64617465 // "dispatch_date"
	global LatestTimestamp
	app_global_put

	// contracts/PurchaseRequest.algo.ts:77
	// this.delivery_status.value = "dispatched"
	bytec 1 //  "delivery_status"
	pushbytes 0x000a64697370617463686564
	app_global_put
	retsub

// confirm_delivery_received()void
*abi_route_confirm_delivery_received:
	// execute confirm_delivery_received()void
	callsub confirm_delivery_received
	intc 0 // 1
	return

// confirm_delivery_received(): void
confirm_delivery_received:
	proto 0 0

	// contracts/PurchaseRequest.algo.ts:85
	// assert(this.txn.sender == this.creator.value, "Only the company can confirm delivery received.")
	txn Sender
	bytec 2 //  "creator"
	app_global_get
	==

	// Only the company can confirm delivery received.
	assert

	// contracts/PurchaseRequest.algo.ts:88
	// assert(this.delivery_status.value != "completed", "Order already completed.")
	bytec 1 //  "delivery_status"
	app_global_get
	extract 2 0
	bytec 9 //  "completed"
	!=

	// Order already completed.
	assert

	// contracts/PurchaseRequest.algo.ts:92
	// this.delivery_status.value = "completed"
	bytec 1 //  "delivery_status"
	bytec 7 // 0x0009636f6d706c65746564
	app_global_put

	// contracts/PurchaseRequest.algo.ts:98
	// log("Delivery received. The order is now completed and closed.")
	pushbytes 0x44656c69766572792072656365697665642e20546865206f72646572206973206e6f7720636f6d706c6574656420616e6420636c6f7365642e // "Delivery received. The order is now completed and closed."
	log
	retsub

// cancel_request()void
*abi_route_cancel_request:
	// execute cancel_request()void
	callsub cancel_request
	intc 0 // 1
	return

// cancel_request(): void
cancel_request:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts/PurchaseRequest.algo.ts:102
	// assert(this.txn.sender == this.creator.value, "Only the company can cancel the request.")
	txn Sender
	bytec 2 //  "creator"
	app_global_get
	==

	// Only the company can cancel the request.
	assert

	// contracts/PurchaseRequest.algo.ts:104
	// currentStatus = this.delivery_status.value
	bytec 1 //  "delivery_status"
	app_global_get
	extract 2 0
	frame_bury 0 // currentStatus: string

	// contracts/PurchaseRequest.algo.ts:107
	// assert(
	//           currentStatus != "dispatch" && currentStatus != "completed" && currentStatus != "assigned",
	//           "The order cannot be canceled as it is already in progress or completed."
	//       )
	frame_dig 0 // currentStatus: string
	bytec 11 //  "dispatch"
	!=
	dup
	bz *skip_and0
	frame_dig 0 // currentStatus: string
	bytec 9 //  "completed"
	!=
	&&

*skip_and0:
	dup
	bz *skip_and1
	frame_dig 0 // currentStatus: string
	pushbytes 0x61737369676e6564 // "assigned"
	!=
	&&

*skip_and1:
	// The order cannot be canceled as it is already in progress or completed.
	assert

	// contracts/PurchaseRequest.algo.ts:113
	// this.product.value = ""
	bytec 12 //  "product"
	bytec 13 // 0x0000
	app_global_put

	// contracts/PurchaseRequest.algo.ts:114
	// this.quantity.value = ""
	bytec 10 //  "quantity"
	bytec 13 // 0x0000
	app_global_put

	// contracts/PurchaseRequest.algo.ts:115
	// this.deadline.value = 0
	bytec 5 //  "deadline"
	intc 1 // 0
	app_global_put

	// contracts/PurchaseRequest.algo.ts:116
	// this.max_budget.value = 0
	bytec 8 //  "max_budget"
	intc 1 // 0
	app_global_put

	// contracts/PurchaseRequest.algo.ts:117
	// this.selected_vendor.value = Address.zeroAddress
	bytec 0 //  "selected_vendor"
	global ZeroAddress
	app_global_put

	// contracts/PurchaseRequest.algo.ts:119
	// log("The purchase request has been canceled.")
	pushbytes 0x546865207075726368617365207265717565737420686173206265656e2063616e63656c65642e // "The purchase request has been canceled."
	log
	retsub

// receive_order()void
*abi_route_receive_order:
	// execute receive_order()void
	callsub receive_order
	intc 0 // 1
	return

// receive_order(): void
receive_order:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dup

	// contracts/PurchaseRequest.algo.ts:123
	// assert(this.txn.sender == this.creator.value, "Only the company can confirm receiving the order.")
	txn Sender
	bytec 2 //  "creator"
	app_global_get
	==

	// Only the company can confirm receiving the order.
	assert

	// contracts/PurchaseRequest.algo.ts:124
	// assert(this.delivery_status.value == "dispatch", "Order has not been dispatched yet or already completed.")
	bytec 1 //  "delivery_status"
	app_global_get
	extract 2 0
	bytec 11 //  "dispatch"
	==

	// Order has not been dispatched yet or already completed.
	assert

	// contracts/PurchaseRequest.algo.ts:127
	// vendor = this.selected_vendor.value
	bytec 0 //  "selected_vendor"
	app_global_get
	frame_bury 0 // vendor: address

	// contracts/PurchaseRequest.algo.ts:128
	// bid = this.vendorBids(vendor).value
	frame_dig 0 // vendor: address
	frame_bury 1 // storage key//bid

	// contracts/PurchaseRequest.algo.ts:131
	// sendPayment({
	//         receiver: vendor,
	//         amount: bid.amount,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts/PurchaseRequest.algo.ts:132
	// receiver: vendor
	frame_dig 0 // vendor: address
	itxn_field Receiver

	// contracts/PurchaseRequest.algo.ts:133
	// amount: bid.amount
	frame_dig 1 // storage key//bid
	box_get

	// box value does not exist: this.vendorBids(vendor).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/PurchaseRequest.algo.ts:137
	// this.delivery_status.value = "completed"
	bytec 1 //  "delivery_status"
	bytec 7 // 0x0009636f6d706c65746564
	app_global_put

	// contracts/PurchaseRequest.algo.ts:139
	// log("Order received and payment released to vendor.")
	pushbytes 0x4f7264657220726563656976656420616e64207061796d656e742072656c656173656420746f2076656e646f722e // "Order received and payment released to vendor."
	log
	retsub

*create_NoOp:
	pushbytes 0x08936709 // method "createApplication(string,string,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x07fb2551 // method "submitBid(uint64,uint64,string)void"
	pushbytes 0x37949976 // method "acceptBid(address)void"
	pushbytes 0xa9015a06 // method "sendFunds(pay)void"
	pushbytes 0xb45771b6 // method "confirm_dispatch(address)void"
	pushbytes 0xf968036a // method "confirm_delivery_received()void"
	pushbytes 0xa3041b1d // method "cancel_request()void"
	pushbytes 0x99efdc94 // method "receive_order()void"
	txna ApplicationArgs 0
	match *abi_route_submitBid *abi_route_acceptBid *abi_route_sendFunds *abi_route_confirm_dispatch *abi_route_confirm_delivery_received *abi_route_cancel_request *abi_route_receive_order

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub