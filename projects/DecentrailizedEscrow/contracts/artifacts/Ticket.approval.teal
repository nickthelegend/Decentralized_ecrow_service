#pragma version 10
intcblock 1 0
bytecblock 0x72656769737465726564436f756e74 0x 0x6576656e744e616d65 0x61737365744944

// This TEAL was generated by TEALScript v0.106.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(string,string,uint64,uint64,uint64)void
*abi_route_createApplication:
	// eventCost: uint64
	txna ApplicationArgs 5
	btoi

	// endTime: uint64
	txna ApplicationArgs 4
	btoi

	// startTime: uint64
	txna ApplicationArgs 3
	btoi

	// location: string
	txna ApplicationArgs 2
	extract 2 0

	// eventName: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(string,string,uint64,uint64,uint64)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(eventName: string, location: string, startTime: uint64, endTime: uint64, eventCost: uint64): void
createApplication:
	proto 5 0

	// contracts\Ticket.algo.ts:50
	// this.creatorAddress.value = this.txn.sender
	pushbytes 0x63726561746f7241646472657373 // "creatorAddress"
	txn Sender
	app_global_put

	// contracts\Ticket.algo.ts:51
	// this.eventName.value = eventName
	bytec 2 //  "eventName"
	frame_dig -1 // eventName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts\Ticket.algo.ts:52
	// this.location.value = location
	pushbytes 0x6c6f636174696f6e // "location"
	frame_dig -2 // location: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts\Ticket.algo.ts:53
	// this.endTime.value = endTime
	pushbytes 0x656e6454696d65 // "endTime"
	frame_dig -4 // endTime: uint64
	app_global_put

	// contracts\Ticket.algo.ts:54
	// this.registeredCount.value = 0
	bytec 0 //  "registeredCount"
	intc 1 // 0
	app_global_put

	// contracts\Ticket.algo.ts:55
	// this.startTime.value = startTime
	pushbytes 0x737461727454696d65 // "startTime"
	frame_dig -3 // startTime: uint64
	app_global_put

	// contracts\Ticket.algo.ts:56
	// this.eventCost.value = eventCost
	pushbytes 0x6576656e74436f7374 // "eventCost"
	frame_dig -5 // eventCost: uint64
	app_global_put
	retsub

// createTickets(string,uint64)void
*abi_route_createTickets:
	// totalTickets: uint64
	txna ApplicationArgs 2
	btoi

	// assetUrl: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createTickets(string,uint64)void
	callsub createTickets
	intc 0 // 1
	return

// createTickets(assetUrl : string, totalTickets: uint64): void
createTickets:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts\Ticket.algo.ts:67
	// assert(this.txn.sender == this.app.creator, "Only The Event Creator can Mint Tickets")
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Only The Event Creator can Mint Tickets
	assert

	// contracts\Ticket.algo.ts:70
	// itxnResult = sendAssetCreation({
	//             configAssetTotal: totalTickets,  // Use configAssetTotal instead of total
	//             configAssetDecimals: 0,      // Use configAssetDecimals instead of decimals
	//             configAssetUnitName: "TCKT",  // Use configAssetUnitName instead of unitName
	//             configAssetName: this.eventName.value, // Use configAssetName instead of assetName
	//             configAssetURL : assetUrl,
	//             fee: 3000,
	//
	//
	//
	//
	//       })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts\Ticket.algo.ts:71
	// configAssetTotal: totalTickets
	frame_dig -2 // totalTickets: uint64
	itxn_field ConfigAssetTotal

	// contracts\Ticket.algo.ts:72
	// configAssetDecimals: 0
	intc 1 // 0
	itxn_field ConfigAssetDecimals

	// contracts\Ticket.algo.ts:73
	// configAssetUnitName: "TCKT"
	pushbytes 0x54434b54 // "TCKT"
	itxn_field ConfigAssetUnitName

	// contracts\Ticket.algo.ts:74
	// configAssetName: this.eventName.value
	bytec 2 //  "eventName"
	app_global_get
	extract 2 0
	itxn_field ConfigAssetName

	// contracts\Ticket.algo.ts:75
	// configAssetURL : assetUrl
	frame_dig -1 // assetUrl: string
	itxn_field ConfigAssetURL

	// contracts\Ticket.algo.ts:76
	// fee: 3000
	pushint 3000
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // itxnResult: uint64

	// contracts\Ticket.algo.ts:83
	// this.assetID.value = itxnResult.id
	bytec 3 //  "assetID"
	frame_dig 0 // itxnResult: uint64
	app_global_put
	retsub

// registerEvent()void
*abi_route_registerEvent:
	// execute registerEvent()void
	callsub registerEvent
	intc 0 // 1
	return

// registerEvent(): void
registerEvent:
	proto 0 0

	// contracts\Ticket.algo.ts:94
	// assert(!this.registeredMap(this.txn.sender).exists, 'already claimed')
	txn Sender
	box_len
	swap
	pop
	!

	// already claimed
	assert

	// contracts\Ticket.algo.ts:95
	// this.registeredCount.value += 1
	bytec 0 //  "registeredCount"
	app_global_get
	intc 0 // 1
	+
	bytec 0 //  "registeredCount"
	swap
	app_global_put

	// contracts\Ticket.algo.ts:96
	// this.registeredMap(this.txn.sender).value = this.txn.txID as bytes32
	txn Sender
	txn TxID
	pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	dup
	extract 32 0
	bytec 1 // 0x
	b==
	assert
	extract 0 32
	box_put

	// contracts\Ticket.algo.ts:101
	// this.sendTickets(1,this.txn.sender)
	txn Sender
	intc 0 // 1
	callsub sendTickets
	retsub

// sendTickets(amountToSend: uint64, receiver:Address): uint64
//
// Sends a specified amount of tokens from a token drop to the given receiver
// and updates the remaining balance of the drop. If the drop is fully claimed,
// it is removed from the active drops.
//
// @param {uint64} amountToSend - Information about the token drop, including the token type and remaining balance.
// @param {Address} receiver - The address of the recipient who will receive the tokens.
// @return {uint64} The remaining balance of tokens in the token drop after the transfer.
sendTickets:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// contracts\Ticket.algo.ts:130
	// sendAssetTransfer({
	//           xferAsset: AssetID.fromUint64(this.assetID.value),
	//           assetReceiver: receiver,
	//           assetAmount: amountToSend,
	//       })
	itxn_begin
	pushint 4 // axfer
	itxn_field TypeEnum

	// contracts\Ticket.algo.ts:131
	// xferAsset: AssetID.fromUint64(this.assetID.value)
	bytec 3 //  "assetID"
	app_global_get
	itxn_field XferAsset

	// contracts\Ticket.algo.ts:132
	// assetReceiver: receiver
	frame_dig -2 // receiver: Address
	itxn_field AssetReceiver

	// contracts\Ticket.algo.ts:133
	// assetAmount: amountToSend
	frame_dig -1 // amountToSend: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\Ticket.algo.ts:137
	// remaining = this.ticketsRemaining.value - amountToSend
	pushbytes 0x7469636b65747352656d61696e696e67 // "ticketsRemaining"
	app_global_get
	frame_dig -1 // amountToSend: uint64
	-
	frame_bury 0 // remaining: uint64

	// contracts\Ticket.algo.ts:139
	// return remaining
	frame_dig 0 // remaining: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

*create_NoOp:
	pushbytes 0x8007f2da // method "createApplication(string,string,uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x016a4500 // method "createTickets(string,uint64)void"
	pushbytes 0x89965c3b // method "registerEvent()void"
	txna ApplicationArgs 0
	match *abi_route_createTickets *abi_route_registerEvent

	// this contract does not implement the given ABI method for call NoOp
	err